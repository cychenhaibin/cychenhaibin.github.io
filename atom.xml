<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Camila&#39;s blog</title>
  
  
  <link href="http://cychenhaibin.github.io/atom.xml" rel="self"/>
  
  <link href="http://cychenhaibin.github.io/"/>
  <updated>2024-09-03T04:51:47.634Z</updated>
  <id>http://cychenhaibin.github.io/</id>
  
  <author>
    <name>Camila</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://cychenhaibin.github.io/2024/09/03/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://cychenhaibin.github.io/2024/09/03/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-09-03T04:51:47.000Z</published>
    <updated>2024-09-03T04:51:47.634Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。</p><h3 id="一、实现自己的迭代器"><a href="#一、实现自己的迭代器" class="headerlink" title="一、实现自己的迭代器"></a>一、实现自己的迭代器</h3><p>实现一个each函数，each函数接受2个参数，第一个为被循环的数组，第二个为循环中的每一步后将被触发的回调函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="keyword">function</span>(<span class="params">ary,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.<span class="property">length</span>; i &lt; l; i++)&#123;</span><br><span class="line">        callback.<span class="title function_">call</span>(ary[i], i, ary[ i ]);    <span class="comment">// 把下标和元素当作参数传给callback函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">each</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="keyword">function</span>(<span class="params">i, n</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>([i, n]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二、内部迭代器和外部迭代器"><a href="#二、内部迭代器和外部迭代器" class="headerlink" title="二、内部迭代器和外部迭代器"></a>二、内部迭代器和外部迭代器</h3><p>迭代器可以分为内部迭代器和外部迭代器</p><ol><li><h4 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h4><p>我们刚刚编写的each函数属于内部迭代器，each函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p><p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的each函数就无法同时迭代2个数组了。</p><p>在一些没有闭包的语言中，内部迭代器本身的实现也相当复杂。比如C语言中的内部迭代器是用函数指针来实现的，循环处理所需要的数据都要以参数的形式明确地从外面传递进去。</p></li><li><h4 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h4><p>外部迭代器必须显式地请求迭代下一个元素。</p><p>外部迭代器增加了一些调用地复杂度，但相对也增强了迭代器地灵活性，我们可以手工控制迭代的过程或者顺序。</p></li></ol><h3 id="三、迭代类数组对象和字面量对象"><a href="#三、迭代类数组对象和字面量对象" class="headerlink" title="三、迭代类数组对象和字面量对象"></a>三、迭代类数组对象和字面量对象</h3><p>迭代器模式不仅可以迭代数组，还可以迭代一些类数组的对象，无论是内部迭代器还是外部迭代器，只要被迭代的聚合对象拥有length属性而且可以用下标访问，那它就可以被迭代。</p><p>在JavaScript中，for in语句可以用来迭代普通字面量对象的属性。</p><p><img src="/../image/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/image-20240903123550097.png" alt="image-20240903123550097"></p><h3 id="四、倒序迭代器"><a href="#四、倒序迭代器" class="headerlink" title="四、倒序迭代器"></a>四、倒序迭代器</h3><p>由于GoF中对迭代器模式的定义非常松散，所以我们可以有多种多样的迭代器实现，总的来说，迭代器模式提供了循环访问一个聚合对象中每个元素的方法，但它没有规定我们以顺序、倒序还是中序来循环遍历聚合对象。</p><p>下面实现一个倒序访问的迭代器：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseEach = <span class="keyword">function</span>(<span class="params">ary,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = ary.<span class="property">length</span> - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--)&#123;</span><br><span class="line">        <span class="title function_">callback</span>(l, ary[l]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reverseEach</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="keyword">function</span>(<span class="params">i, n</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);    <span class="comment">// 2， 1， 0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="五、中止迭代器"><a href="#五、中止迭代器" class="headerlink" title="五、中止迭代器"></a>五、中止迭代器</h3><p>迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p><p>下面我们把之前的each函数改写一下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="keyword">function</span>(<span class="params">ary, callback</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; l = ary.<span class="property">length</span>; i &lt; l; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">callback</span>(i, ary[i]) === <span class="literal">false</span>)&#123;     <span class="comment">// callback的执行结果返回false，提前终止迭代</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">each</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="keyword">function</span>(<span class="params">i, n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">3</span>)&#123;                  <span class="comment">// n大于3的时候终止循环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)              <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://cychenhaibin.github.io/2024/09/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://cychenhaibin.github.io/2024/09/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-09-03T02:29:47.000Z</published>
    <updated>2024-09-03T02:30:10.151Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><p>代理模式是为了一个对象提供一个代用品或占位符，以便控制对它的访问</p><p>道理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理后，再把请求转交给本体对象。</p><h3 id="一、第一个例子——小明追MM的故事"><a href="#一、第一个例子——小明追MM的故事" class="headerlink" title="一、第一个例子——小明追MM的故事"></a>一、第一个例子——小明追MM的故事</h3><blockquote><p>在四月一个晴朗的早晨，小明遇到了他百分百女孩，我们暂且称呼小明的女神为A。两天过后，小明决定给A送一束花来表白。刚好小明打听到A和他有一个共同的朋友B，于是内向的小明决定让B来代替自己完成送花这件事情。</p></blockquote><p>不用代理模式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">receiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到花&#x27;</span> + flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(A);</span><br></pre></td></tr></table></figure><p>接下来，我们引入代理B，即小明通过B来给A送花：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receivelower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">receiverFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        A.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">receiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到花&#x27;</span> + flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(B);</span><br></pre></td></tr></table></figure><p>现在我们改变故事的背景设定，假设当A在心情好的时候收到花，小明表白成功的机率有60%，而当A在心情差的时候收到花，小明表白的成功率无限趋近于0.</p><p>小明跟A刚刚认识两天，还无法辨别A什么时候心情好。如果不合时宜地把花送给A，花被直接扔掉的可能性很大。</p><p>但是A的朋友B却很了解A，所以小明只管把花交给B，B会监听A的心情变化，然后选择A心情好的时候把花转交给A：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">receiverFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        A.<span class="title function_">listenGoodMood</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">// 监听A的好心情</span></span><br><span class="line">            A.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">receiverFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到花&#x27;</span> + flower);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">listenGoodMood</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">        &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(B);</span><br></pre></td></tr></table></figure><h3 id="二、保护代理和虚拟代理"><a href="#二、保护代理和虚拟代理" class="headerlink" title="二、保护代理和虚拟代理"></a>二、保护代理和虚拟代理</h3><p>代理B可以帮助A过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理B处被拒绝掉。这种代理叫做<strong>保护代理</strong>。A和B一个充当白脸，一个充当黑脸，白脸A继续保持良好的女神形象，不希望直接拒绝任何人，于是找了黑脸B来控制对A的访问。</p><p>假设现实中化的价格不菲，导致在程序世界里，new Flower也是一个代价昂贵的操作，那么我们可以把new Flower的操作交给代理B去执行，代理B会选择在A心情好时再执行new Flower，这是代理的另一种模式，叫做<strong>虚拟代理</strong>。虚拟代理把一些开销很大的对象，延迟到真正需要它的时候才去创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">receiverFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>)&#123;</span><br><span class="line">        A.<span class="title function_">listenGoodMood</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">// 监听A的好心情</span></span><br><span class="line">            A.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>保护代理用于控制不同权限的对象对目标对象的访问，但在JavaScript并不容易实现保护代理，因为我们无法判断谁访问了某个对象。而虚拟代理是最常用的一种代理模式。</p><h3 id="三、虚拟代理图片预加载"><a href="#三、虚拟代理图片预加载" class="headerlink" title="三、虚拟代理图片预加载"></a>三、虚拟代理图片预加载</h3><p>在web开发中，图片预加载是一种常用的技术，如果直接给某个img标签节点设置src属性，由于图片过大或者网络不佳，图片的位置往往有段时间是空白的。常见的做法是先用一张loading图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到img节点里，这种场景就很适合使用虚拟代理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imgNode);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>)&#123;</span><br><span class="line">            imgNode.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">myImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;http://xxx.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在开始引入代理对象proxyImage，通过这个代理对象，在图片被真正加载好之前，页面中将出现一张占位的图，来提示用户图片正在加载。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imgNode);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>)&#123;</span><br><span class="line">            imgNode.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>;</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        myImage.<span class="title function_">setSrc</span>(<span class="variable language_">this</span>.<span class="property">src</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>)&#123;</span><br><span class="line">            myImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;file:xxx.gif&#x27;</span>);</span><br><span class="line">            img.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;http://xxx.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、代理的意义"><a href="#四、代理的意义" class="headerlink" title="四、代理的意义"></a>四、代理的意义</h3><p>不用代理的预加载图片函数实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyImage</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imgNode);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>;</span><br><span class="line">    </span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        imgNode.<span class="property">src</span> = img.<span class="property">src</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>)&#123;</span><br><span class="line">            imgNode.<span class="property">src</span> = <span class="string">&#x27;file:xxx.gif&#x27;</span>;</span><br><span class="line">            img.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyImage</span>.<span class="title function_">setSrc</span>(<span class="string">&#x27;http://xxx.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>为了说明代理的意义，下面我们引人一个面向对象设计的原则——单一职责原则。</p><p>单一职责原则指的是，就一个类(通常也包括对象和丽数等)而言，应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。面向对象设计鼓励将行为分布到细粒度的对象之中,如果一个对象承担的职责过多，等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p><p>职责被定义为“引起变化的原因”。上段代码中的MyImage对象除了负责给img节点设置src外，还要负责预加载图片。我们在处理其中一个职责时，有可能因为其强耦合性影响另外一个职责的实现。</p><p>另外，在面向对象的程序设计中，大多数情况下，若违反其他任何原则，同时将违反开放——封闭原则。如果我们只是从网络上获取一些体积很小的图片，或者5年后的网速快到根本不再需要预加载，我们可能希望把预加载图片的这段代码从MyImage对象里删掉。这时候就不得不改动MyImage对象了。</p><p>实际上，我们需要的只是给img节点设置STC，预加载图片只是一个锦上添花的功能。如果能把这个操作放在另一个对象里面，自然是一个非常好的方法。于是代理的作用在这里就体现出来了，代理负责预加载图片，预加载的操作完成之后，把请求重新交给本体MyImage。</p><h3 id="五、代理和本体接口的一致性"><a href="#五、代理和本体接口的一致性" class="headerlink" title="五、代理和本体接口的一致性"></a>五、代理和本体接口的一致性</h3><p>上一节说到，如果有一天我们不再需要预加载，那么就不再需要代理对象，可以选择直接请求本体。其中关键是代理对象和本体都对外提供了setSrc方法，在客户看来，代理对象和本体是一致的，代理接手请求的过程对于用户来说是透明的，用户并不清楚代理和本体的别，这样做有两个好处。</p><ul><li>用户可以放心地请求代理，他只关心是否能得到想要的结果。</li><li>在任何使用本体的地方都可以替换成使用代理。</li></ul><p>在Java等语言中，代理和本体都需要显式地实现同一个接口，一方面接口保证了它们会拥有同样的方法，另一方面，面向接口编程迎合依赖倒置原则，通过接口进行向上转型，从而避开编译器的类型检查，代理和本体将来可以被替换使用。</p><p>在JavaScrit这种动态类型语言中，我们有时通过鸭子类型来检测代理和本体是否都实现了setSrc方法，另外大多数时候甚至干跪不做检测，全部依赖程序员的自觉性，这对于程序的健壮性是有影响的。不过对于一门快速开发的脚本语言，这些影响还是在可以接受的范围内，而且我们也习惯了没有接口的世界。</p><p>另外值得一提的是，如果代理对象和本体对象都为一个两数(两数也是对象)，两数必然都能被执行，则可以认为它们也具有一致的“接口”。</p><h3 id="六、虚拟代理合并HTTP请求"><a href="#六、虚拟代理合并HTTP请求" class="headerlink" title="六、虚拟代理合并HTTP请求"></a>六、虚拟代理合并HTTP请求</h3><p>先想象这样一个场景：每周我们都要写一份工作周报，周报要交给总监批阅。总监手下管理着150个员工，如果我们每个人直接把周报发给总监，那总监可能要把一整周的时间都花在查看邮件上面。</p><p>现在我们把周报发给各自的组长，组长作为代理，把组内成员的周报合并提炼成一份后一次性地发给总监。这样一来，总监的邮箱便清净多了。</p><p>这个例子在程序世界里很容易引起共鸣，在Web开发中，也许最大的开销就是网络请求。假设我们在做一个文件同步的功能，当我们选中一个checkbox的时候，它对应的文件就会被同步到另外一台备用服务器上面。</p><h3 id="七、缓存代理"><a href="#七、缓存代理" class="headerlink" title="七、缓存代理"></a>七、缓存代理</h3><p>缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。</p><ol><li><h4 id="缓存代理的例子——计算乘积"><a href="#缓存代理的例子——计算乘积" class="headerlink" title="缓存代理的例子——计算乘积"></a>缓存代理的例子——计算乘积</h4><p>先创建一个用于求乘积的函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始计算乘积&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; l = <span class="variable language_">arguments</span>.<span class="property">length</span>;i &lt; l; i++)&#123;</span><br><span class="line">        a = a * <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mult</span>(<span class="number">2</span>,<span class="number">3</span>);   <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">mult</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>现在加入缓存代理函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxyMult = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args] = mult.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">proxyMult</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 24</span></span><br><span class="line"><span class="title function_">proxyMult</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>当我们第二次调用proxyMult(1，2，3，4）的时候，本体mult函数并没有被计算，proxyMult直接返回了之前缓存好的计算结果。</p><p>通过增加缓存代理的方式，mult函数可以继续专注于自身的职责——计算乘积，缓存的功能是由代理对象实现的。</p></li><li><h4 id="缓存代理用于ajax异步请求"><a href="#缓存代理用于ajax异步请求" class="headerlink" title="缓存代理用于ajax异步请求"></a>缓存代理用于ajax异步请求</h4><p>我们在常常在项目中遇到分页的需求，同一页的数据理论上只需要去后台拉取一次，这些已经拉取到的数据在某个地方被缓存之后，下次再请求同一页的时候，便可以直接使用之前的数据。</p><p>显然这里也可以引人缓存代理，实现方式跟计算乘积的例子差不多，唯一不同的是，请求数据是个异步的操作，我们无法直接把计算结果放到代理对象的缓存中，而是要通过回调的方式。</p></li></ol><h3 id="八、其他代理模式"><a href="#八、其他代理模式" class="headerlink" title="八、其他代理模式"></a>八、其他代理模式</h3><p>代理模式的变化种类非常多</p><ul><li>防火墙代理：控制网络资源的访问，保护主机不让”坏人”接近。</li><li>远程代理：为一个对象在不同的地址空间提供局部代表，在Java中，远程代理可以是另一个虚拟机中的对象，</li><li>保护代理：用于对象应该有不同访问权限的情况。</li><li>智能引用代理：取代了简单的指针，它在访问对象时执行一些附加操作，比如计算一个对象被引用的次数。</li><li>写时复制代理：通常用于复制一个庞大对象的情况。写时复制代理延迟了复制的过程，当对象被真正修改时，才对它进行复制操作。写时复制代理是虚拟代理的一种变体，DLL（操作系统中的动态链接库）是其典型运用场景。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;代理模式是为了一个对象提供一个代用品或占位符，以便控制对它的访问&lt;/p&gt;
&lt;p&gt;道理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://cychenhaibin.github.io/2024/09/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://cychenhaibin.github.io/2024/09/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-09-02T04:59:47.000Z</published>
    <updated>2024-09-02T05:00:13.373Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><p>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h3 id="一、实现单例模式"><a href="#一、实现单例模式" class="headerlink" title="一、实现单例模式"></a>一、实现单例模式</h3><p>用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;seven1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;seven2&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(a === b);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过<code>Singleton.getInstance</code>来获取Singleton类的唯一对象，这种方式相对简单，但有一个问题，就是增加了这个类的”不透明性”，Singleton类的使用者必须知道这是一个单例类，跟以往通过new xxx的方式来获取的对象不同，这里偏要使用<code>Singleton.getInstance</code>来获取对象。</p><h3 id="二、透明的单例模式"><a href="#二、透明的单例模式" class="headerlink" title="二、透明的单例模式"></a>二、透明的单例模式</h3><p>用户从这个类中创建对象的时候，可以像使用其他任何普通类一样。下面，我们将使用CreateDiv单例类，它的作用是负责在页面中创建唯一的div节点。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CreateDiv</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">CreateDiv</span> = <span class="keyword">function</span>(<span class="params">html</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CreateDiv</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="string">&#x27;seven1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="string">&#x27;seven2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(a === b);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>为了把instance封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的Singleton构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服。</p><p>CreateDiv的构造函数实际上负责了两件事情，第一是创建对象和执行初始化init方法，第二是保证只有一个对象。</p><h3 id="三、用代理实现单例模式"><a href="#三、用代理实现单例模式" class="headerlink" title="三、用代理实现单例模式"></a>三、用代理实现单例模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CreateDiv</span> = <span class="keyword">function</span>(<span class="params">html</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> div = documents.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来引入代理类proxySingletonCreateDiv：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">html</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(html);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&#x27;seven1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&#x27;seven2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(a === b);</span><br></pre></td></tr></table></figure><p>通过引入代理类的方式，我们同样完成了一个单例模式的编写，跟之前不同的是，现在我们负责管理单例的逻辑移到了代理类proxySingletonCreateDiv中，这样一来，CreateDiv就变成了一个普通的类，它跟proxySingletonCreateDiv组合起来可以达到单例模式的效果。</p><h3 id="四、JavaScript中的单例模式"><a href="#四、JavaScript中的单例模式" class="headerlink" title="四、JavaScript中的单例模式"></a>四、JavaScript中的单例模式</h3><p>前面提到的几种单例模式的实现，更多的是接近传统面向对象语言中的实现，单例对象从”类”中创建而来。在以类为中心的语言中，这是很自然的做法。</p><p>但JavaScript其实是一门无类语言，也正因为如此，生搬单例模式的概念并无意义。在JavaScript中创建对象的方法非常简单，既然我们只需一个”唯一”的对象，为什么要为它先创建一个”类”呢？</p><p><strong>单例模式的核心是确保只有一个实例，并提供全局访问</strong></p><p>全局变量不是单例模式，但在JavaScript开发中，我们经常会把全局变量当成单例来使用：<code>var a = &#123;&#125;</code>。</p><p>当用这种方式创建对象a时，对象a确实是独一无二的。如果a变量被声明在全局作用域下，则我们可以在代码中的任何位置使用这个变量，全局变量提供给全局访问是理所当然的。这样满足了单例模式的两个条件。</p><p>但是全局变量存在很多问题，它很容易造成命名空间污染。在大中型项目中，如果不加以限制和管理，程序中可能存在很多这样的变量JavaScript中的变量也很容易被不小心覆盖，相信每个JavaScript程序员都曾经历过变量冲突的痛苦，随时有可能被别人覆盖。</p><p>作为普通的开发者，我们有必要尽量减少全局变量的使用，即使需要，也要把它的污染降到最低。以下几种方式可以相对降低全局变量带来的命名污染。</p><ol><li><h4 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h4><p>适当地使用命名空间，并不会杜绝全局变量，但可以减少全局变量的数量。</p><p>最简单的方法依然是用对象字面量的方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把a和b都定义为namespace1的属性，这样可以减少变量和全局作用域打交道的机会。另外，我们还可以动态地创建命名空间：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyApp</span> = &#123;&#125;;</span><br><span class="line"><span class="title class_">MyApp</span>.<span class="property">namespace</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = name.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> current = <span class="title class_">MyApp</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> parts)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!current[parts[i]])&#123;</span><br><span class="line">            current[parts[i]] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current[parts[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyApp</span>.<span class="title function_">namespace</span>(<span class="string">&#x27;event&#x27;</span>);</span><br><span class="line"><span class="title class_">MyApp</span>.<span class="title function_">namespace</span>(<span class="string">&#x27;dom.style&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">MyApp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码等价于：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyApp</span> = &#123;</span><br><span class="line">    <span class="attr">event</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">dom</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="使用闭包封装私有变量"><a href="#使用闭包封装私有变量" class="headerlink" title="使用闭包封装私有变量"></a>使用闭包封装私有变量</h4><p>这种方法把一些变量封装在闭包内部，只暴露一些接口跟外界通信：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> __name = <span class="string">&#x27;seven&#x27;</span>,</span><br><span class="line">        __age = <span class="number">29</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getUserInfo</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> __name + <span class="string">&#x27;-&#x27;</span> + age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>用下划线来约定变量<code>__name</code>和<code>__age</code>，它们被封装在闭包产生的作用域中，外部是访问不到这两个变量的，这就避免了对全局的命令污染。</p></li></ol><h3 id="五、惰性单例"><a href="#五、惰性单例" class="headerlink" title="五、惰性单例"></a>五、惰性单例</h3><p>惰性单例指的是在需要的时候才创建对象实例。instance实例对象总是在我们调用<code>Singleton.getInstance</code>的时候才被创建，而不是在页面加载好的时候就创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>不过这是基于”类”的单例模式，基于”类”的单例模式在JavaScript中并不适用。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p>单例模式是一种简单但非常实用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。更奇妙的是，创建对象和管理惰性单例的职责被分布在两个不同的方法中，这两个方法组合起来才具有单例模式的威力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;h3 id=&quot;一、实现单例模式&quot;&gt;&lt;a href=&quot;#一、实现单例模式&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://cychenhaibin.github.io/2024/09/01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://cychenhaibin.github.io/2024/09/01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-31T18:51:47.000Z</published>
    <updated>2024-08-31T18:52:40.727Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><p>策略模式的定义是：定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换。</p><h3 id="一、使用策略模式计算奖金"><a href="#一、使用策略模式计算奖金" class="headerlink" title="一、使用策略模式计算奖金"></a>一、使用策略模式计算奖金</h3><ol><li><h4 id="最初代码实现："><a href="#最初代码实现：" class="headerlink" title="最初代码实现："></a>最初代码实现：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateBonus = <span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">calculateBonus</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">20000</span>);   <span class="comment">// 40000</span></span><br><span class="line"><span class="title function_">calculateBonus</span>(<span class="string">&#x27;S&#x27;</span>,<span class="number">6000</span>);    <span class="comment">// 24000</span></span><br></pre></td></tr></table></figure><p>这段代码十分简单，但是存在着显而易见的缺点：</p><ul><li><p><code>calculateBonus</code>函数比较庞大，包含了很多if-else语句，这些语句需要覆盖所有的逻辑分支。</p></li><li><p><code>calculateBonus</code>函数缺乏弹性违反开放-封闭原则</p></li><li><p>算法的复用性差</p></li></ul></li><li><h4 id="使用组合函数重构代码"><a href="#使用组合函数重构代码" class="headerlink" title="使用组合函数重构代码"></a>使用组合函数重构代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">performanceS</span>(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">performanceA</span>(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(performanceLevel === <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">performanceB</span>(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">calculateBonus</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">10000</span>);    <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure></li><li><h4 id="使用策略模式重构代码"><a href="#使用策略模式重构代码" class="headerlink" title="使用策略模式重构代码"></a>使用策略模式重构代码</h4><p>策略模式指的是定义一系列的算法，把它们一个个封装起来。将不变的部分和变化的部分隔开是每个设计模式的主题，策略模式的目的就是将算法的使用与算法的实现分离开来。</p><p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组<strong>策略类</strong>，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是<strong>环境类Context</strong>，Context接受客户的请求，随后把请求委托给某一个策略类。</p><p>也可以有三种：<strong>抽象策略（strategy）类、具体策略（Concrete Strategy）类、环境（Context）类。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">performanceS.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">performanceA.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">performanceB.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来定义奖金类Bonus</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bonus</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = <span class="literal">null</span>;                           <span class="comment">// 原始工资</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = <span class="literal">null</span>;                         <span class="comment">// 绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setSalary</span> = <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;                         <span class="comment">// 设置员工的原始工资</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setStrategy</span> = <span class="keyword">function</span>(<span class="params">strategy</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;                     <span class="comment">// 设置员工绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property">prorotype</span>.<span class="property">getBonus</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;            <span class="comment">// 取得奖金数额</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">strategy</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;未设置strategy属性&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">calculate</span>(<span class="variable language_">this</span>.<span class="property">salary</span>);  <span class="comment">// 把计算奖金操作委托给对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus = <span class="keyword">new</span> <span class="title class_">Bonus</span>();</span><br><span class="line"></span><br><span class="line">bonus.<span class="title function_">setSalary</span>(<span class="number">10000</span>);</span><br><span class="line">bonus.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performanceS</span>());            <span class="comment">// 设置策略对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bonus.<span class="title function_">getBonus</span>());                    <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performanceA</span>());            <span class="comment">// 设置策略对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bonus.<span class="title function_">getBonus</span>());                    <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="二、JavaScript版本的策略模式"><a href="#二、JavaScript版本的策略模式" class="headerlink" title="二、JavaScript版本的策略模式"></a>二、JavaScript版本的策略模式</h3><p>实际上在JavaScript语言中，函数也是对象，所以更简单和直接的做法是把strategy直接定义为函数：</p><p>将判断语句改写成对象形式可以消除大片的条件分支语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">&quot;S&quot;</span>: <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;B&quot;</span>: <span class="keyword">function</span>(<span class="params">salary</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="keyword">function</span>(<span class="params">level, salary</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculateBonus</span>(<span class="string">&#x27;S&#x27;</span>,<span class="number">20000</span>));   <span class="comment">// 80000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculateBonus</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">10000</span>));   <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><h3 id="三、多态在策略模式中的体现"><a href="#三、多态在策略模式中的体现" class="headerlink" title="三、多态在策略模式中的体现"></a>三、多态在策略模式中的体现</h3><p>通过使用策略模式重构代码，我们消除了原程序中大片的条件分支语句。所有跟计算奖金有关的逻辑不再放在Context中，而是分布在各个策略对象中。Context并没有计算奖金的能力，而是把这个职责委托给了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。<strong>当我们对这些策略对象发出”计算奖金”的请求时，它们会返回各自不同的计算结果，这正是对象多态性的体现，也是”它们可以相互替换”的目的。</strong>替换Context中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果。</p><h3 id="四、策略模式的优缺点"><a href="#四、策略模式的优缺点" class="headerlink" title="四、策略模式的优缺点"></a>四、策略模式的优缺点</h3><ol><li><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。</li><li>策略模式提供了对开放-封闭原则地完美支持，将算法封装在独立的strategy中，使得它们易于切换，易于理解，易于扩展。</li><li>策略模式的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</li><li>在策略模式中利用组合和委托来让Context拥有执行算法的能力，这也是继承的一种更轻便的代替方案。</li></ul></li><li><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><p>使用策略模式会在程序中增加许多策略类或者策略对象，但实际上这比把它们负责的逻辑堆砌在Context中要好。</p></li><li><p>要使用策略模式，必须了解所有的strategy，必须了解各个strategy之间的不同点，这样才能选择一个合适的strategy。</p></li></ul></li></ol><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>在JavaScript语言的策略模式中，策略类往往被函数所代替，这时策略模式就成为一种”隐式”的模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;策略模式的定义是：定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换。&lt;/p&gt;
&lt;h3 id=&quot;一、使用策略模式计算奖金&quot;&gt;&lt;a href=&quot;#一、使用策略模式计算奖金&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>闭包和高阶函数</title>
    <link href="http://cychenhaibin.github.io/2024/08/31/%E9%97%AD%E5%8C%85%E5%92%8C%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://cychenhaibin.github.io/2024/08/31/%E9%97%AD%E5%8C%85%E5%92%8C%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2024-08-31T15:00:47.000Z</published>
    <updated>2024-08-31T15:00:52.300Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><h3 id="一、闭包"><a href="#一、闭包" class="headerlink" title="一、闭包"></a>一、闭包</h3><ol><li><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>当在函数中声明一个变量的时候，如果该变量前面没有带上关键字 <code>var</code> ，这个变量就会成为全局变量。另一种情况是用 <code>var</code> 关键字在函数中声明变量，这时候变量即是局部变量。</p><p>在JavaScript中，函数可以用来创造函数作用域，此时的函数就像一层半透明的玻璃，在函数里面可以看到外面的变量，而在函数外面无法看到函数里面的变量。这是因为当在函数中搜索一个变量的时候，如果该函数内并没有声明这个变量，那么此次搜索的过程会随着代码执行环境创建的作用域链往外层逐层搜索，一直搜索到全局对象为止。<strong>变量的搜索是从内到外而非从外到内的。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> func2 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="title function_">alert</span>(b);   <span class="comment">// 2</span></span><br><span class="line">        <span class="title function_">alert</span>(a);   <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">func2</span>();</span><br><span class="line">    <span class="title function_">alert</span>(c);       <span class="comment">// c is not defined</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">func1</span>();</span><br></pre></td></tr></table></figure></li><li><h4 id="变量的生存周期"><a href="#变量的生存周期" class="headerlink" title="变量的生存周期"></a>变量的生存周期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;     <span class="comment">// 退出函数后局部变量a将被销毁</span></span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="title function_">alert</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">func</span>();</span><br><span class="line"><span class="title function_">f</span>();  <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">f</span>();  <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">f</span>();  <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">f</span>();  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>当退出函数后，局部变量a并没有消失，而是似乎一直在某个地方存活着。这是因为当执行了 <code>var f = func()</code> 时，f返回了一个匿名函数的引用，它可以访问到 <code>func()</code> 被调用时产生的环境，二局部变量a一直处于这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个<strong>闭包结构</strong>，局部变量的生命看起来被延续了。</p></li><li><h4 id="闭包的更多作用"><a href="#闭包的更多作用" class="headerlink" title="闭包的更多作用"></a>闭包的更多作用</h4><ol><li><h5 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h5><p>闭包可以帮助把一些不需要暴露在全局的变量封装成”私有变量”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; l = <span class="variable language_">arguments</span>.<span class="property">length</span>; i&lt;l; i++)&#123;</span><br><span class="line">        a = a * <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="延续局部变量的寿命"><a href="#延续局部变量的寿命" class="headerlink" title="延续局部变量的寿命"></a>延续局部变量的寿命</h5></li></ol></li><li><h4 id="闭包的面向对象设计"><a href="#闭包的面向对象设计" class="headerlink" title="闭包的面向对象设计"></a>闭包的面向对象设计</h4><p>对象以方法的形式包含了过程，而闭包则是在过程中以环境的形式包含了数据。</p><p>下面看看这段跟闭包相关的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> extent = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">call</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            value++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> extent = <span class="title function_">extent</span>();</span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 1</span></span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 2</span></span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果换成面向对象的写法，就是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> extent = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">call</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 1</span></span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 2</span></span><br><span class="line">extent.<span class="title function_">call</span>();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><h4 id="用闭包实现命令模式"><a href="#用闭包实现命令模式" class="headerlink" title="用闭包实现命令模式"></a>用闭包实现命令模式</h4><p>命令模式的意图是把请求封装为对象，从而分离请求的发起者和请求的接收者（执行者）之间的耦合关系。</p></li><li><h4 id="闭包与内存管理"><a href="#闭包与内存管理" class="headerlink" title="闭包与内存管理"></a>闭包与内存管理</h4><p>局部变量本来应该在函数退出的时候被解除引用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。<strong>使用闭包的原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量</strong>，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。不能说成是内存泄露。</p><p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时比较容易形成<strong>循环引用</strong>，<strong>如果闭包的作用域链中保存着一些DOM节点，这时候就有可能造成内存泄漏</strong>，但这本身并非闭包问题，也并非JavaScript的问题，在基于引用计数策略的垃圾回收机制中，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收，但循环引用造成的内存泄露在本质上也不是闭包造成的。</p><p>同样，如果要解决循环引用带来的内存泄露问题，我们<strong>只需要把循环引用中的变量设为null即可</strong>。将变量设置为null意味着<strong>切断变量与它此前引用的值之间的连接</strong>。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。</p></li></ol><h3 id="二、高阶函数"><a href="#二、高阶函数" class="headerlink" title="二、高阶函数"></a>二、高阶函数</h3><p>高阶函数是指至少满足下列条件之一的函数：</p><ul><li><p>函数可以作为参数被传递</p></li><li><p>函数可以作为返回值输出</p></li><li><p>一个函数可以接收另一个函数作为参数</p></li></ul><ol><li><h4 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h4><ol><li><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><p>在ajax异步请求的应用中，回调函数的使用非常频繁。当我们想在ajax请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把callback函数当作参数传入发起ajax请求的方法中，待请求完成之后执行callback函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getUserInfo = <span class="keyword">function</span>(<span class="params">userId, callback</span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(<span class="string">&#x27;http://xxx.com/getUserInfo?&#x27;</span>+userId,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getUserInfo</span>(<span class="number">13157</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(data.<span class="property">userName</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数的应用不仅只在异步请求中，当一个函数不适合执行一些请求时，我们也可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，”委托”给另外一个函数来执行。</p></li><li><h5 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a><code>Array.prototype.sort</code></h5><p><code>Array.prototype.sort</code>接受一个函数当作参数，这个函数里面封装了数组元素的排列顺序。从<code>Array.prototype.sort</code>的使用可以看到，我们的目的是对数组进行排序，这是不变的部分；而使用什么规则去排序，则是可变的部分。把可变的部分封装在函数的参数里，动态传入<code>Array.prototype.sort</code>，使<code>Array.prototype.sort</code>方法成为了一个非常灵活的方法，代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;   <span class="comment">// 从小到大排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="函数作为返回值输出"><a href="#函数作为返回值输出" class="headerlink" title="函数作为返回值输出"></a>函数作为返回值输出</h4><ol><li><h5 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h5><p>判断一个数据是否是数组，在以往的实现中，可以基于鸭子类型的概念来判断，比如判断这个数据有没有length属性，有没有sort方法或者slice方法等。但更好的方式是用<code>Object.prototype.toString</code>来计算。<code>Object.prototype.toString.call(obj)</code>返回一个字符串，比如<code>Object.prototype.toString.call([1,2,3])</code>总是返回<code>&quot;[object Array]&quot;</code>。所以我们可以编写一系列的isType函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isString = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object String]&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isArray = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isNumber = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Number]&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h5 id="getSingle"><a href="#getSingle" class="headerlink" title="getSingle"></a>getSingle</h5><p>这个高阶的例子，既把函数当作参数传递，又让函数执行后返回了另一个函数。可以看看getSingle的效果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getScript = <span class="title function_">getSingle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script1 = <span class="title function_">getScript</span>();</span><br><span class="line"><span class="keyword">var</span> script2 = <span class="title function_">getScript</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(script1 === script2);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="高阶函数实现AOP"><a href="#高阶函数实现AOP" class="headerlink" title="高阶函数实现AOP"></a>高阶函数实现AOP</h4><p>AOP（面向切面编程）的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来后，再通过”动态织入”的方式掺入业务逻辑模块中。</p></li><li><h4 id="高阶函数的其他应用"><a href="#高阶函数的其他应用" class="headerlink" title="高阶函数的其他应用"></a>高阶函数的其他应用</h4><ol><li><h5 id="currying（柯里化函数）"><a href="#currying（柯里化函数）" class="headerlink" title="currying（柯里化函数）"></a>currying（柯里化函数）</h5><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另一个函数，刚才传入的参数在函数形成的闭包中被保存起来，待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p><p>假设我们要编写一个计算每个月开销的函数。在每天结束之前，我们都要记录今天花掉了多少钱：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> monthlyCost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> cost = <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">    monthlyCost += money;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);            <span class="comment">// 第一天开销</span></span><br><span class="line"><span class="title function_">cost</span>(<span class="number">200</span>);            <span class="comment">// 第二天开销</span></span><br><span class="line"><span class="title function_">cost</span>(<span class="number">300</span>);            <span class="comment">// 第三天开销</span></span><br><span class="line"><span class="comment">//cost(700);          // 第三十天开销</span></span><br><span class="line"><span class="title function_">alert</span>(monthlyCost);   <span class="comment">// 600</span></span><br></pre></td></tr></table></figure><p>每天结束后我们都会记录并计算到今天为止花掉的钱。但我们其实并不太关心每天花掉了多少钱，而只想知道月底的时候会花掉多少钱。也就是说，实际上只需要在月底计算一次。</p><p>如果在每个月前29天，我们都只是保存好当天的开销，直到第30天才进行求值计算，这样就达到了我们的要求。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接受一个函数fn作为参数，返回一个新函数（会收集所有传入的参数，并将它们一次性应用到fn函数上</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;  </span><br><span class="line">    <span class="comment">// 存储传递给柯里化函数的参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [];        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 如果没有传入参数，就将存储到args中的参数一次性应用到fn函数上</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 调用fn函数，将args数组中的所有参数传递给fn</span></span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);    </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果传递了参数则将参数增加到args中</span></span><br><span class="line">            [].<span class="property">push</span>.<span class="title function_">apply</span>(args, <span class="variable language_">arguments</span>);  </span><br><span class="line">            <span class="comment">// 返回当前正在执行的函数本身</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;l = <span class="variable language_">arguments</span>.<span class="property">length</span>; i&lt;l; i++)&#123;</span><br><span class="line">            money += <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> cost = <span class="title function_">currying</span>(cost);</span><br><span class="line"></span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">200</span>);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">cost</span>());</span><br></pre></td></tr></table></figure><p>当调用cost()时，如果明确地带上了一些参数，表示此时并不进行真正的求值计算，而是把这些参数保存起来，此时让cost函数返回另外一个函数。只有当我们以不带参数的形式执行cost()时，才利用前面保存的所有参数，真正开始进行求值计算。</p></li><li><h5 id="uncurrying"><a href="#uncurrying" class="headerlink" title="uncurrying"></a>uncurrying</h5><p>在类数组对象arguments借用<code>Array.prototype</code>的方法之前，先把<code>Array.prototype.push.call</code>这句代码转换为一个通用的push函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> push = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">uncurrying</span>();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">push</span>(<span class="variable language_">arguments</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);   <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>通过uncurrying的方式，<code>Array.prototype.push.call</code>变成了一个通用的push函数。这样一来。push函数的作用就跟<code>Array.prototype.push</code>一样了，同样不仅仅局限于只能操作array对象。</p></li><li><h5 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h5><p>函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则我们一般不会遇到跟性能相关的问题。但是在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题。</p><ol><li><p>函数被频繁调用的场景</p><ul><li><p>window.onresize事件</p></li><li><p>mousemove事件</p></li><li><p>上传进度</p></li></ul></li><li><p>函数节流的原理</p><p>上面提到的三个场景，发现他们面临的共同问题是函数被触发的频率太高。通过使用定时器来控制函数的频率。</p></li></ol></li><li><h5 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a>分时函数</h5><p>某些函数确实是用户主动调用的，但因为一些客观的原因，这些函数会严重影响页面性能。处理大量数据或高频率事件时，通过将任务拆分成多个小块来提高性能和响应速度的技术，确保在执行复杂的操作时不会阻塞浏览器UI线程。</p><p><strong>比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点。</strong></p></li><li><h5 id="惰性加载函数"><a href="#惰性加载函数" class="headerlink" title="惰性加载函数"></a>惰性加载函数</h5><p>函数执行的分支只会在函数第一次调用才执行。</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、闭包&quot;&gt;&lt;a href=&quot;#一、闭包&quot; class=&quot;headerlink&quot; title=&quot;一、闭包&quot;&gt;&lt;/a&gt;一、闭包&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;变量的作用域&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>this、call和apply</title>
    <link href="http://cychenhaibin.github.io/2024/08/31/this%E3%80%81call%E5%92%8Capply/"/>
    <id>http://cychenhaibin.github.io/2024/08/31/this%E3%80%81call%E5%92%8Capply/</id>
    <published>2024-08-30T16:56:47.000Z</published>
    <updated>2024-08-30T16:59:24.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、this"><a href="#一、this" class="headerlink" title="一、this"></a>一、this</h3><p>this的四种绑定方式：<strong>隐式绑定</strong>、<strong>显式绑定</strong>、<strong>window绑定</strong>、<strong>new绑定</strong></p><p><strong>隐式绑定</strong>：使用对象来调用其内部的一个方法，该方法的this是指向对象本身的，this永远指向最后调用它的那个对象。</p><p><strong>显式绑定</strong>：通过call来设置函数执行上下文的this指向。</p><p><strong>window绑定</strong>：在ES5严格模式中，JavaScript不会默认this指向window对象，而会正确地把this保持为underfined。</p><p><strong>new绑定</strong>：用new调用函数时，JavaScript解释器都会在底层创建一个全新地对象并把这个对象当做this</p><p>改变this指向：</p><ul><li><p>使用ES6箭头函数</p></li><li><p>在函数内部使用_this &#x3D; this</p></li><li><p>使用apply、call、bind</p></li><li><p>new一个实例化对象</p></li></ul><ol><li><h4 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h4><ol><li><h5 id="作为对象方法调用"><a href="#作为对象方法调用" class="headerlink" title="作为对象方法调用"></a>作为对象方法调用</h5><p>当函数作为对象地方法被调用时，this指向该对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">getA</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span> === obj);     <span class="comment">// true</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>);           <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getA</span>();</span><br></pre></td></tr></table></figure></li><li><h5 id="作为普通函数调用"><a href="#作为普通函数调用" class="headerlink" title="作为普通函数调用"></a>作为普通函数调用</h5><p>作为普通函数调用，this指向全局对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;globalName&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;globalName&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;seven&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = myObject.<span class="property">getName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure><p><strong>箭头函数注意：</strong></p><ol><li><p>函数体内this就是定义时所的对象，而非调用时的所在对象，和普通函数相反</p></li><li><p>箭头函数无法用做构造器，即不能使用new调用</p></li><li><p>不能使用arguments对象，不存在</p></li><li><p>不可以使用yield命令，即无法用做Generator命令</p></li></ol></li><li><h5 id="构造器调用"><a href="#构造器调用" class="headerlink" title="构造器调用"></a>构造器调用</h5><p>JavaScript中没有类，但是可以从构造器中创建对象，同时也提供了new运算符，使得构造函数看起来更像一个类。</p><p>除了宿主提供的一些内置函数，大部分JavaScript函数都可以当作构造器使用。构造器的外表跟普通函数一摸一样，它们的区别在于被调用的方式。当用new运算符调用函数时，该函数总是返回一个对象，通常情况下，构造器里的this就指向返回的这个对象。</p></li><li><h5 id="Function-prototype-call-或-Function-prototype-apply调用"><a href="#Function-prototype-call-或-Function-prototype-apply调用" class="headerlink" title="Function.prototype.call 或 Function.prototype.apply调用"></a><code>Function.prototype.call</code> 或 <code>Function.prototype.apply</code>调用</h5><p>跟普通函数相比，用 <code>Function.prototype.call</code> 或 <code>Function.prototype.apply</code>可以动态地改变传入函数地this。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;sven&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;anne&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="title function_">getName</span>());             <span class="comment">// sven</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">call</span>(obj2));  <span class="comment">// anne</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="丢失的this"><a href="#丢失的this" class="headerlink" title="丢失的this"></a>丢失的this</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">myName</span>: <span class="string">&#x27;sven&#x27;</span>,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">myName</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getName</span>());    <span class="comment">// sven</span></span><br><span class="line"><span class="keyword">var</span> getName2 = obj.<span class="property">getName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getName2</span>());       <span class="comment">// underfined</span></span><br></pre></td></tr></table></figure><p>当调用obj.getName时，getName方法是作为obj对象地属性被调用时，此时的this指向obj对象，所以<code>obj.getName()</code>输出sven。</p><p>当另外一个变量getName2来引用 <code>obj.getName</code>，并且调用getName2时，此时时普通函数调用方式，this是指向全局window的，所以程序执行结果是underfined。</p></li></ol><h3 id="二、call-和-apply"><a href="#二、call-和-apply" class="headerlink" title="二、call 和 apply"></a>二、call 和 apply</h3><p>bind是创建一个新对象</p><ul><li><p>call和apply是立即执行，bind则是返回了一个绑定的this的新函数，只有调用了这个新函数才真正的调用了目标函数。</p></li><li><p>bind函数存在多次绑定问题，如果多次绑定this，则以第一次为准</p></li><li><p>bind函数实际上是显式绑定（call、apply）的一个变种，称为硬绑定，ES5中提供了内置的方法 <code>Function。prototype.bind</code></p></li></ul><ol><li><h4 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h4><p>apply接受两个参数，第一个参数指定了函数体内的this对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply方法把这个集合中的元素作为参数传递给被调用的函数。</p><p>call传入的参数量不固定，跟apply不同的是，第一个参数也是代表函数体内的this指向，从第二个参数往后，每个参数被依次传入函数。</p><p>当使用call或者apply的时候，如果我们传入的第一个参数为null，函数体内的this会指向默认的宿主对象，在浏览器中则是window。</p><p>但如果是在严格模式下，函数体内的this还是为null</p></li><li><h4 id="call和apply的用途"><a href="#call和apply的用途" class="headerlink" title="call和apply的用途"></a>call和apply的用途</h4><ol><li><h5 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h5><p>call和apply最常见的用途是改变函数内部的this指向</p><p>在实际开发中，经常会遇到this指向被不经意改变的场景，比如有一个div节点，div节点的onclick事件中的this本来是指向这个div的：嵌套中的this不会从外层函数中继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);      <span class="comment">// div1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如该事件函数中有一个内部函数func，在事件内部调用func函数时，func函数体内的this就指向window，而不是我们预期的div：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);      <span class="comment">// div1</span></span><br><span class="line">    <span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);  <span class="comment">// underfined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们用call来修正func函数内的this，使其依然指向div：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    func.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind"></a><code>Function.prototype.bind</code></h5><p>大部分高级浏览器都实现了内置的 <code>Function.prototype.bind</code>，用来指定函数内部的this指向</p></li><li><h5 id="借用其他对象的方法"><a href="#借用其他对象的方法" class="headerlink" title="借用其他对象的方法"></a>借用其他对象的方法</h5><p>我们知道，杜鹃既不会筑巢，也不会孵椆，而是把自己的蛋寄托给云雀等其他鸟类，让它们代为孵化和养育。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5></li></ol><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、this&quot;&gt;&lt;a href=&quot;#一、this&quot; class=&quot;headerlink&quot; title=&quot;一、this&quot;&gt;&lt;/a&gt;一、this&lt;/h3&gt;&lt;p&gt;this的四种绑定方式：&lt;strong&gt;隐式绑定&lt;/strong&gt;、&lt;strong&gt;显式绑定&lt;/strong</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的JavaScript</title>
    <link href="http://cychenhaibin.github.io/2024/08/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript/"/>
    <id>http://cychenhaibin.github.io/2024/08/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript/</id>
    <published>2024-08-30T07:38:47.000Z</published>
    <updated>2024-08-30T11:34:29.732Z</updated>
    
    <content type="html"><![CDATA[<p>看本文之前需要有JavaScript的基础知识</p><hr><p>JavaScript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承，也没有在语言层面提供对抽象类和接口的支持</p><h3 id="一、动态类型语言和鸭子模型"><a href="#一、动态类型语言和鸭子模型" class="headerlink" title="一、动态类型语言和鸭子模型"></a>一、动态类型语言和鸭子模型</h3><p>编程语言按照数据类型大体可分为两类：<strong>静态类型语言</strong>、<strong>动态类型语言</strong></p><p>静态类型语言在编译时便已经确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值后，才会具有某种类型。</p><ol><li><p>静态语言</p><ul><li><p>优点：</p><p>在编译时就能发现类型不匹配的错误，如果在程序中明确规定了数据类型，编译器还可以针对这些信息对程序进行一些优化的工作，提高程序执行速度</p></li><li><p>缺点：</p><p>迫使程序员按照锲约来编写程序，类型的声明会增加更多代码</p></li></ul></li><li><p>动态语言</p><ul><li><p>优点：</p><p>编写的代码数量少，更加简洁</p></li><li><p>缺点：</p><p>无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误</p></li></ul></li></ol><p>在JavaScript中，当我们对一个变量赋值时，虽然不需要考虑他的类型，因此，<strong>JavaScript是一门典型的动态类型语言。</strong></p><p>这一切都建立在鸭子类型的概念上，鸭子类型的通俗说法是：”如果它走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。”</p><p>我们可以通过一个小故事来更深刻的了解鸭子类型：</p><blockquote><p>​从前在JavaScript的王国里，有一个国王，他觉得世界上最美妙的声音就是鸭子叫声，于是国王召集大臣，要组建一个1000只鸭子组成的合唱团。大臣们找遍了全国，终于找到了999只鸭子，但始终还差一只，最后大臣发现有一只非常特别的鸡，它的叫声跟鸭子一摸一样，于是这只鸡就成为了合唱团的最后一员。</p></blockquote><p>这个故事告诉我们，国王要听的只是鸭子的叫声，这个声音的主人到底是鸡还是鸭并不重要，鸭子类型指导我们只关注对象的行为，而不关注对象本身。</p><h3 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h3><p>多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果，换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p><p>从字面意思理解多态不太容易，下面我们来举例说明一下。</p><blockquote><p>主人家里养了两只动物，分别是一只鸡和一只鸭，当主人向他们发出”叫”的命令时，鸭会”嘎嘎嘎”地叫，而鸡会”咯咯咯”地叫。这两只动物都会以自己的方式来发出叫声。它们同样”都是动物，并且可以发出叫声”，但根据主人的指令，它们会各自发出不同的叫声。</p></blockquote><ol><li><h4 id="一段”多态”的JavaScript代码"><a href="#一段”多态”的JavaScript代码" class="headerlink" title="一段”多态”的JavaScript代码"></a>一段”多态”的JavaScript代码</h4><p>我们把上面的故事用JavaScript代码实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="keyword">function</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> <span class="title class_">Duck</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘎嘎嘎&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> <span class="title class_">Chicken</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;咯咯咯&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Duck</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Chicken</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="title function_">makeSound</span>(<span class="keyword">new</span> <span class="title class_">Duck</span>());</span><br><span class="line"><span class="title function_">makeSound</span>(<span class="keyword">new</span> <span class="title class_">Chicken</span>());</span><br></pre></td></tr></table></figure><p>这段代码确实体现了”多态性”，当我们分别向鸭和鸡发出”叫唤”的消息时，它们根据此消息做出了各自不同的反应，但是这样的”多态性”是无法令人满意的，如果后来增加一只动物，此时我们必须要改动<code>makeSound</code>函数，修改代码总是危险的，当动物的种类越来越多时，<code>makeSound</code>有可能变成一个巨大的函数。</p><p>多态背后的思想是将”做什么”和”谁去做以及怎样做”分离开来，也就是将”不变的事物”与”可能改变的事物”分离开来。在这个故事中，动物会叫，这个是不变的，但是不同类型的动物具体怎么叫是可变的，把不变的部分隔离出来，把可变的部分封装起来，这给予了我们扩展程序的能力，程序看起来可生长的，也是符合开放-封闭原则的，相对于修改代码来说，仅仅增加代码就能完成同样的功能，这显然优雅和安全得多。</p></li><li><h4 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h4><p>下面是改写后的代码，首先我们把不变的部分隔离出来，那就是所有的动物都会发出叫声：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="keyword">function</span>(<span class="params">animal</span>)&#123;</span><br><span class="line">    animal.<span class="title function_">sound</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把可变的部分各自封装起来，我们刚才谈到的多态性实际上是对象的多态性：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Duck</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Duck</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘎嘎嘎&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Chicken</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Chicken</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;咯咯咯&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">makeSound</span>(<span class="keyword">new</span> <span class="title class_">Duck</span>());</span><br><span class="line"><span class="title function_">makeSound</span>(<span class="keyword">new</span> <span class="title class_">Chicken</span>());</span><br></pre></td></tr></table></figure></li><li><h4 id="检查类型和多态"><a href="#检查类型和多态" class="headerlink" title="检查类型和多态"></a>检查类型和多态</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;咯咯咯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalSound</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">(Duck duck)</span>&#123;    <span class="comment">// (1)</span></span><br><span class="line">        duck.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">AnimalSound</span> <span class="variable">animalSound</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalSound</span>();</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">duck</span>();</span><br><span class="line">        animalSound.makeSound(duck);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经顺利让鸭子可以发出叫声，但如果现在想要鸡也叫起来，我们发现这是一件不可能实现的事情，因为(1)处<code>AnimalSound</code>类的<code>makeSound</code>方法，被我们规定为只能接受Duck类型的参数。</p><p>某些时候，在享受静态语言类型检查带来安全性的同时，我们亦会感觉被束缚了手脚。</p><p>为了解决这一问题，静态类型的面向对象语言通常被设计为可以<strong>向上转型</strong>：当给一个类变量赋值时，这个变量的类型既可以使用这个类本身，也可以使用这个类的超类。就像我们描述天上的一只麻雀或者一只喜鹊，通常可以说”一只麻雀在飞”或者”一只喜鹊在飞”。但如果想忽视他们的具体类型，那么也可以说”一只鸟在飞”。</p><p>同理，当Duck对象和Chicken对象的类型都被隐藏在超类型的Animal身后，Duck对象和Chicken对象就能被交换使用，这是让对象表现出多态性的必经之路，而多态性的表现正是实现众多设计模式的目标。</p></li><li><h4 id="使用继承得到多态效果"><a href="#使用继承得到多态效果" class="headerlink" title="使用继承得到多态效果"></a>使用继承得到多态效果</h4><p>使用继承来得到多态效果，是让对象表现出多态性的最常用手段。</p><p>我们先创建一个Animal抽象类，再分别让Duck和Chicken都继承自Animal抽象类，下面代码中(1)处和(2)处的赋值语句显然是成立的，因为鸭子和鸡也是动物</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;  <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chicken</span> extend Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;咯咯咯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> extend Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duck</span>();       <span class="comment">// (1)</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">Chicken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chicken</span>(); <span class="comment">// (2)</span></span><br></pre></td></tr></table></figure><p>现在剩下的就是让<code>AnimalSound</code>类的<code>makeSound</code>方法接受Animal类型的参数，而不是具体的Duck类型或者Chicken类型：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalSound</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">(Animal animal)</span>&#123;</span><br><span class="line">        animal.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">AnimalSound</span> <span class="variable">animalSound</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalSound</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">Chicken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chicken</span>();</span><br><span class="line">        animal.makeSound(duck);</span><br><span class="line">        animal.makeSound(chicken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="JavaScript的多态"><a href="#JavaScript的多态" class="headerlink" title="JavaScript的多态"></a>JavaScript的多态</h4><p>在java中可以通过向上转型来实现，而JavaScript的变量类型在运行期是可变的，一个JavaScript对象，既可以表示Duck类型的对象，又可以表示Chicken类型的对象，这意味着JavaScript对象的多态性是与生俱来的。</p><p>在JavaScript中，并不需要向上转型之类的技术来取得多态的效果</p></li><li><h4 id="多态在面向对象程序设计中的作用"><a href="#多态在面向对象程序设计中的作用" class="headerlink" title="多态在面向对象程序设计中的作用"></a>多态在面向对象程序设计中的作用</h4><p>Martin Fowler在《重构：改善既有代码的设计》里写道：</p><blockquote><p>多态的最根本好处在于，你不必再向对象询问”你是什么类型”而后根据得到的答案调用对象的某个行为——你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p></blockquote><p>Martin Fowler的话可以用下面这个例子很好的诠释：</p><blockquote><p>在电影的拍摄现场，当导演喊出”action”时，主角开始背台词，照明师负责打灯，后面的群众演员假装中枪倒地，道具师往镜头前撒上雪花。在得到同一消息时，每个对象都知道自己应该做什么。如果不利于对象的多态性，而是用面向对象的方式来编写这段代码，那么相当于在电影开始拍摄之后，导演每次都要走到每个人面前，确认它们的职业分工（类型），然后告诉它们要做什么。如果映射到程序中，那么程序中将充斥着条件分支语句。</p></blockquote><p><strong>将行为分布在各个对象中，并让这些对象各自负责自己的行为，这正是面向对象的程序设计</strong></p></li></ol><p>​</p><h3 id="三、封装"><a href="#三、封装" class="headerlink" title="三、封装"></a>三、封装</h3><p><strong>封装的目的是将信息隐藏</strong></p><ol><li><h4 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h4><p>只能依赖变量的作用域来实现封装特性，而且只能模拟出public和private这两种封装性。</p><p>除了ES6中提供的let之外，一般我们通过函数来创建作用域。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _name = <span class="string">&#x27;seven&#x27;</span>;        <span class="comment">// 创建private变量</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">// 公开public方法</span></span><br><span class="line">            <span class="keyword">return</span> _name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在ES6中，还可以通过Symbol创建私有属性。</p></li><li><h4 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h4><p>封装实现细节的例子非常多，拿迭代器来说明，迭代器的作用是在一个不暴露一个聚合对象的内部表示的前提下，提供一种方式来顺序访问这个聚合对象。我们编写了一个each函数，它的作用就是遍历一个聚合对象，使用这个each函数的人不用关心它的内部代码是怎样实现的，只要它提供的功能正确便可以。即使each函数修改了内部源码，只要对外的接口或者调用方式没有变化，用户就不用关心它内部实现的改变。</p></li><li><h4 id="封装类型"><a href="#封装类型" class="headerlink" title="封装类型"></a>封装类型</h4><p>封装类型是静态类型语言中一种重要的封装方式，一般而言，封装类型是通过抽象类和接口来进行的。把对象的真正类型隐藏在抽象类或者接口之后，相比对象的类型，客户更关心对象的行为，在许多静态语言的设计模式中，想方设法地去隐藏对象的类型，也是促使这些模式诞生的原因之一。比如工厂方法模式、组合模式等。</p></li></ol><h3 id="四、原型模式基于原型继承的JavaScript对象系统"><a href="#四、原型模式基于原型继承的JavaScript对象系统" class="headerlink" title="四、原型模式基于原型继承的JavaScript对象系统"></a>四、原型模式基于原型继承的JavaScript对象系统</h3><p>原型模式不单是一种设计模式，也称为一种编程泛型。</p><ol><li><h4 id="使用克隆的原型模式"><a href="#使用克隆的原型模式" class="headerlink" title="使用克隆的原型模式"></a>使用克隆的原型模式</h4><p>原型模式是用于创建对象的一种模式，如果我们要创建一个对象，一种方法是先指定它的类型，然后通过类来创建对象。原型模式选择了另一种方式，我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一摸一样的对象。</p><p>原型模式的实现关键，是语言本身是否提供了clone方法。ES5提供了 <code>Object.create</code> 方法，可以用来克隆对象。</p></li><li><h4 id="克隆是创建对象的手段"><a href="#克隆是创建对象的手段" class="headerlink" title="克隆是创建对象的手段"></a>克隆是创建对象的手段</h4><p>原型模式提供了另一种创建对象的方式，通过克隆对象，我们就不用再关心对象的具体类型名字。这就像一个仙女要送给三岁小女孩生日礼物，虽然小女孩可能还不知道飞机或者船怎么说，但她可以指着商店橱柜里的飞机模型说”我要这个”。</p><p>当然在JavaScript这种类型模糊的语言中，创建对象非常容易，也不存在类型耦合的问题。从设计模式的角度来讲，原型模式的意义比不算大。但JavaScript本身是一门基于原型的面向对象语言，它的对象系统就是使用原型模式搭建的，在这里称之为原型编程范型也许更合适。</p></li><li><h4 id="体验Io语言"><a href="#体验Io语言" class="headerlink" title="体验Io语言"></a>体验Io语言</h4><p>在JavaScript语言中不存在类的概念，对象也并非从类中创建出来的，所有的JavaScript对象都是从某个对象上克隆而来的。</p><p>JavaScript基于原型的面向对象系统参考了Self语言和Smalltalk语言，为了搞清JavaScript中的原型，我们本该寻根溯源这两门语言，但由于这两门语言距离现在是在太遥远，我们转而了解一下另外一种轻巧又基于原型的语言——Io语言。</p><p>作为一门基于原型的语言，Io中同样没有类的概念，每一个对象都是基于另外一个对象的克隆。在Io中，根对象名为Object。</p></li><li><h4 id="原型编程范型的一些规则"><a href="#原型编程范型的一些规则" class="headerlink" title="原型编程范型的一些规则"></a>原型编程范型的一些规则</h4><p>如果A对象是从B对象克隆而来，那么B对象就是A对象的原型。每个对象都有原型，这个原型还有属于自己的原型，最终形成了原型链，原型链最顶端是null。基于原型链的委托机制就是原型继承的本质</p><p>为什么设计原型：继承，让对象的属性和方法共享。</p><p>原型编程中的一个重要特征：当对象无法响应某个请求时，会把该请求对象委托给它自己的原型。</p><p>原型编程规范至少包括以下基本准则</p><ul><li><p>所有的数据都是对象</p></li><li><p>要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它</p></li><li><p>对象会记住它的原型</p></li><li><p>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</p></li></ul></li><li><h4 id="JavaScript中的原型继承"><a href="#JavaScript中的原型继承" class="headerlink" title="JavaScript中的原型继承"></a>JavaScript中的原型继承</h4><ol><li><h5 id="所有数据都是对象"><a href="#所有数据都是对象" class="headerlink" title="所有数据都是对象"></a>所有数据都是对象</h5><p>按照JavaScript设计者的本意，除了underfined之外，一切都应是对象，事实上，JavaScript中的根对象是 <code>Object.prototype</code> 对象。<code>Object.prototype</code>对象是一个空对象。我们在遇到的每个对象，实际上都是从 <code>Object.prototype</code> 对象克隆而来的，<code>Object.prototype</code> 对象就是它们的原型。</p></li><li><h5 id="要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它"><a href="#要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它" class="headerlink" title="要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它"></a>要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它</h5><p>在JavaScript语言里，我们并不关心克隆的细节，因为这是引擎内部负责实现的，我们所需要做的只是显式地调用 <code>var obj1 = new Object()</code> 或者 <code>var obj2 = &#123;&#125;</code> 。此时，引擎内部会从<code>Object.prototype</code> 上面克隆一个对象出来，我们最终得到地就是这个对象。</p><p>JavaScript的函数既可以作为普通函数被调用，也可以作为构造器被调用。当使用new运算符来调用函数时，此时的函数就是一个构造器。用new运算符来创建对象的过程，实际上也只是先克隆 <code>Object.prototype</code> 对象，再进行一些其他额外操作的过程。</p><p><strong>JavaScript是通过克隆<code>Object.prototype</code>来得到新的对象，但实际上并不是每次都真正克隆了一个新的对象</strong></p></li><li><h5 id="对象会记住它的原型"><a href="#对象会记住它的原型" class="headerlink" title="对象会记住它的原型"></a>对象会记住它的原型</h5><p>JavaScript给对象提供了一个名为<code>__proto__</code>的隐藏属性，某个对象的<code>__proto__</code>属性会默认指向它的构造器的原型对象，即 <code>&#123;Constructor&#125;.prototype</code>。在一些浏览器中，<code>__proto__</code>被公开出来。</p><p>实际上，<code>__proto__</code>就是对象跟”对象构造器的原型”联系起来的纽带。因为对象要通过<code>__proto__</code>属性来记住它的构造对象的原型。</p></li><li><h5 id="如果对象无法响应某个请求，它会把这个请求委托给它自己的原型"><a href="#如果对象无法响应某个请求，它会把这个请求委托给它自己的原型" class="headerlink" title="如果对象无法响应某个请求，它会把这个请求委托给它自己的原型"></a>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</h5><p>这条规则即是原型继承的精髓所在。JavaScript的克隆跟Io语言还是有点不一样，Io中每个对象都可以作为原型被克隆，当Animal对象克隆自Object对象，Dog对象又克隆自Animal对象时，就形成了一条天然的原型链。</p><p>而在JavaScript中，每个对象都是从 <code>Object.prototype</code> 对象克隆而来的，如果是这样的话，我们只能得到单一的继承关系，即每个对象都继承自  <code>Object.prototype</code> 对象，这样的对象系统显然是受限的。</p><p>实际上，虽然JavaScript的对象最初都是由 <code>Object.prototype</code> 对象克隆而来的，但对象构造器的原型并不仅限于 <code>Object.prototype</code> 上，而是可以动态指向其他对象。这样一来，当对象a需要借用对象b的能力时，可以有选择性的把对象a的构造器的原型指向对象b，从而达到继承的效果。</p><p>下面的代码是我们最常用的原型继承方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;seven&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);  <span class="comment">// seven</span></span><br></pre></td></tr></table></figure><p>当我们期望得到一个”类”继承自另外一个”类”的效果时：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;seven&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>)   <span class="comment">// seven</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>JavaScript中一切引用类型都是对象，对象就是属性的集合</li><li>Array类型、Function类型、Object类型、Date类型、RegExp类型都是引用类型</li><li>原型存在的意义就是组成原型链</li><li>原型链存在的意义就是继承</li><li>继承存在的意义就是属性共享</li><li>构造函数用来创建对象，同一构造函数创建的对象，其原型相同</li><li>对象有 <code>__proto__</code> 属性，函数有 <code>__proto__</code> 属性，数组也有 <code>__proto__</code> 属性，只要是引用类型，就有 <code>__proto__</code> 属性，指向其原型</li><li>只有函数有 <code>prototype</code> 属性，指向new操作符加调用该函数创建的对象实例的原型对象</li><li>instanceof运算符用于检查右边构造函数的 <code>prototype</code> 属性是否出现在左边对象的原型链中的任何位置，其他它则表示的是一种原型链的继承关系</li><li>继承意味着复制操作，然而JavaScript默认并不会复制对象的属性，相反，JavaScript只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看本文之前需要有JavaScript的基础知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承，也没有在语言层面提供对抽象类和接口的支持&lt;/p&gt;
&lt;h3 id=&quot;一、动态类型语言和鸭子模型&quot;</summary>
      
    
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/categories/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="JavaScript的设计模式和开发实践" scheme="http://cychenhaibin.github.io/tags/JavaScript%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>算法:滑动窗口</title>
    <link href="http://cychenhaibin.github.io/2024/08/23/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://cychenhaibin.github.io/2024/08/23/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2024-08-23T14:22:47.000Z</published>
    <updated>2024-08-30T11:27:28.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、无重复字符的最长子集"><a href="#一、无重复字符的最长子集" class="headerlink" title="一、无重复字符的最长子集"></a>一、无重复字符的最长子集</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p><p><strong>示例1:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 2:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 3:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> charIndexMap = &#123;&#125;; <span class="comment">// 存储字符及其索引的映射</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>; <span class="comment">// 初始化子串的起始索引</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span>; <span class="comment">// 初始化最长不重复子串的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> end = <span class="number">0</span>; end &lt; s.<span class="property">length</span>; end++) &#123; <span class="comment">// end指针遍历整个字符串</span></span><br><span class="line">        <span class="keyword">const</span> currentChar = s[end]; <span class="comment">// 当前字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前字符已经在charIndexMap中，并且索引不小于start</span></span><br><span class="line">        <span class="keyword">if</span> (charIndexMap.<span class="title function_">hasOwnProperty</span>(currentChar) &amp;&amp; charIndexMap[currentChar] &gt;= start) &#123;</span><br><span class="line">            <span class="comment">// 移动start到重复字符索引的下一个位置</span></span><br><span class="line">            start = charIndexMap[currentChar] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新当前字符在charIndexMap中的索引</span></span><br><span class="line">        charIndexMap[currentChar] = end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新最长不重复子串的长度</span></span><br><span class="line">        maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLength, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength; <span class="comment">// 返回最长不重复子串的长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、无重复字符的最长子集&quot;&gt;&lt;a href=&quot;#一、无重复字符的最长子集&quot; class=&quot;headerlink&quot; title=&quot;一、无重复字符的最长子集&quot;&gt;&lt;/a&gt;一、无重复字符的最长子集&lt;/h3&gt;&lt;p&gt;给定一个字符串 &lt;code&gt;s&lt;/code&gt; ，请你找出其中</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://cychenhaibin.github.io/2024/08/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://cychenhaibin.github.io/2024/08/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2024-08-23T04:47:47.000Z</published>
    <updated>2024-08-23T06:58:25.811Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240823 12:47</p><hr><h3 id="一、wxml组件和wxss适配"><a href="#一、wxml组件和wxss适配" class="headerlink" title="一、wxml组件和wxss适配"></a>一、wxml组件和wxss适配</h3><ol><li><h4 id="wxml-—-div"><a href="#wxml-—-div" class="headerlink" title=".wxml —- div"></a>.wxml —- div</h4><ol><li>view — div</li><li>text文字：可以长按选中</li><li>image — img</li><li>button</li><li>form</li><li>input</li><li>label</li></ol></li><li><h4 id="wxss-—-css"><a href="#wxss-—-css" class="headerlink" title=".wxss —- .css"></a>.wxss —- .css</h4><p>单位：rpx</p><p>布局：弹性盒布局</p></li></ol><h3 id="二、JS数据-列表-条件渲染-事件"><a href="#二、JS数据-列表-条件渲染-事件" class="headerlink" title="二、JS数据-列表-条件渲染-事件"></a>二、JS数据-列表-条件渲染-事件</h3><ol><li><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">str</span>:<span class="string">&quot;这是小程序&quot;</span></span><br><span class="line">    <span class="attr">city</span>: [</span><br><span class="line">        <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">        <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">        <span class="string">&quot;四川&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&#x27;&#123;&#123;city&#125;&#125;&#x27;</span> <span class="attr">wx:key</span>=<span class="string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span>&gt;</span></span><br><span class="line">&#123;&#123; item &#125;&#125;</span><br><span class="line">    &#123;&#123; index &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&#x27;&#123;city.length &gt; 0&#125;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:for</span>=<span class="string">&#x27;&#123;&#123;city&#125;&#125;&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">暂无数据...</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>bind：不会阻止冒泡</p><p>catch：会阻止冒泡</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="修改data中的数据"><a href="#修改data中的数据" class="headerlink" title="修改data中的数据"></a>修改data中的数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">str</span>:<span class="string">&#x27;我已经修改你了&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、请求接口和封装url"><a href="#三、请求接口和封装url" class="headerlink" title="三、请求接口和封装url"></a>三、请求接口和封装url</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 闭包要改变this指向</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">That</span> = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://ehcto.com/data.json&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">key</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">            <span class="attr">userName</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="title class_">That</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">cityName</span>: res.<span class="property">data</span>.<span class="property">city</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、页面跳转-路径传值"><a href="#四、页面跳转-路径传值" class="headerlink" title="四、页面跳转-路径传值"></a>四、页面跳转-路径传值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- list.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">这是list页面</span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:for</span>=<span class="string">&#x27;&#123;&#123;cityList&#125;&#125;&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- list.<span class="property">js</span> --&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">cityList</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">option</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = option.<span class="property">cityList</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">cityList</span>: arr</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">&#x27;toLogs&#x27;</span>&gt;</span> &#123;&#123;cityName&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.<span class="property">js</span> --&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">cityName</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">toLogs</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">That</span> = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;../list/list?cityList=&quot;</span>+<span class="title class_">That</span>.<span class="property">data</span>.<span class="property">cityList</span>+<span class="string">&quot;,</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">    onLoad: function()&#123;</span></span><br><span class="line"><span class="string">    // 闭包要改变this指向</span></span><br><span class="line"><span class="string">    let That = this;</span></span><br><span class="line"><span class="string">    wx.request(&#123;</span></span><br><span class="line"><span class="string">        url: &#x27;https://ehcto.com/data.json&#x27;,</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            key:&#x27;123&#x27;,</span></span><br><span class="line"><span class="string">            userName:&quot;</span>张三<span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        success(res)&#123;</span></span><br><span class="line"><span class="string">            That.setData(&#123;</span></span><br><span class="line"><span class="string">                cityName: res.data.city,</span></span><br><span class="line"><span class="string">                    cityList: res.data.hotList</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="五、template的使用"><a href="#五、template的使用" class="headerlink" title="五、template的使用"></a>五、template的使用</h3><ol><li><h4 id="template目录结构"><a href="#template目录结构" class="headerlink" title="template目录结构"></a>template目录结构</h4><ul><li>pages<ul><li>templates<ul><li>swiper-template<ul><li>swiper-template.wxml</li><li>swiper-template.wxss</li><li>swiper-template.js</li></ul></li><li>tabs-template</li></ul></li></ul></li></ul></li><li><h4 id="template的使用"><a href="#template的使用" class="headerlink" title="template的使用"></a>template的使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&#x27;swiper&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="页面引入"><a href="#页面引入" class="headerlink" title="页面引入"></a>页面引入</h4><p>wxml：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&#x27;swiper&#x27;</span> <span class="attr">data</span>=<span class="string">&#x27;&#123;&#123;数据1, 数据2...&#125;&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>wxss:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;/pages/templates/swiper-template/swiper-tempalte.wxss&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240823 12:47&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、wxml组件和wxss适配&quot;&gt;&lt;a href=&quot;#一、wxml组件和wxss适配&quot; class=&quot;headerlink&quot; title=&quot;一、wxml组件和wxss适配&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://cychenhaibin.github.io/2024/08/22/Vue/"/>
    <id>http://cychenhaibin.github.io/2024/08/22/Vue/</id>
    <published>2024-08-22T08:27:47.000Z</published>
    <updated>2024-08-22T08:27:58.133Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240822 16:27</p><hr><h2 id="一、Vue脚手架"><a href="#一、Vue脚手架" class="headerlink" title="一、Vue脚手架"></a>一、Vue脚手架</h2><p>vue-cli：框架  —-&gt; 脚手架</p><ol><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p><code>npm install -g @vue/cli</code></p></li><li><h4 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h4><p><code>vue -V </code></p></li><li><h4 id="安装老版本vue-cli"><a href="#安装老版本vue-cli" class="headerlink" title="安装老版本vue-cli"></a>安装老版本vue-cli</h4><p><code>npm install -g vue-cli</code></p></li><li><h4 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h4><p><code>npm install -g vue-cli@版本号</code></p></li><li><h4 id="查看全部版本"><a href="#查看全部版本" class="headerlink" title="查看全部版本"></a>查看全部版本</h4><p><code>npm view vue-cli versions --json</code></p></li><li><h4 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h4><p><code>vue init webpack 项目名称</code></p></li></ol></li><li><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>vue create 项目名称</code></p></li><li><h3 id="vue文件"><a href="#vue文件" class="headerlink" title=".vue文件"></a>.vue文件</h3><p>三大部分：</p><p>template：盒子布局的<br>script：js逻辑<br>style：css样式</p></li><li><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><p>只要运行vue项目，main.js就会执行</p><p>index.html —&gt; main.js —&gt; App.vue</p></li><li><h4 id="vue是”数据”驱动"><a href="#vue是”数据”驱动" class="headerlink" title="vue是”数据”驱动"></a>vue是”数据”驱动</h4><p>定义数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            str:&#x27;123&#x27;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; str &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、Vue指令"><a href="#二、Vue指令" class="headerlink" title="二、Vue指令"></a>二、Vue指令</h2><ol><li><h4 id="指令（v-xxx）"><a href="#指令（v-xxx）" class="headerlink" title="指令（v-xxx）"></a>指令（v-xxx）</h4><p><code>v-bind</code>：单向绑定</p><p><code>v-bind:属性名=&#39;数据&#39;</code></p><p>简写：</p><p><code>:属性名=&#39;数据&#39;</code></p><p><strong>指令不需要加入{{}}</strong></p></li><li><h4 id="列表渲染和条件渲染"><a href="#列表渲染和条件渲染" class="headerlink" title="列表渲染和条件渲染"></a>列表渲染和条件渲染</h4><ol><li><p>列表渲染（v-for）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in arr&#x27; :key=&#x27;index&#x27;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">                &#123;&#123; index &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>条件渲染（v-if）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&#x27;types==&quot;张三&quot;&#x27;&gt;</span><br><span class="line">    11111</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else-if=&#x27;types==&quot;李四&quot;&#x27;&gt;</span><br><span class="line">    22222</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;</span><br><span class="line">    33333</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>事件添加</p><p><code>&lt;h1 v-on:click=&#39;方法&#39;&gt;&lt;/h1&gt;</code></p><p>简写：</p><p><code>&lt;h1 @click=&#39;方法&#39;&gt;&lt;/h1&gt;</code></p><p>注意：vue-cli中的方法要添加在methods</p></li></ol><p><strong>【面试题】v-if 和 v-for 的优先级</strong></p><ul><li><p>v-for比v-if高</p></li><li><p>正常的使用上来说</p><ul><li><p>v-if</p></li><li><p>​v-for</p></li></ul></li></ul></li><li><h4 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h4><ol><li><p><code>v-if</code></p><p>创建与删除的操作</p></li><li><p><code>v-show</code></p><p>显示和隐藏（<code>display:none;、display:block;</code>）</p></li></ol><p><strong>【面试题】两者区别</strong></p><ul><li><p>v-if 是创建和删除节点、v-show 是隐藏和显示节点</p></li><li><p>如果用户频繁切换的状态应该用v-show</p></li><li><p>如果一刷新进入页面的状态v-show的性能差一点</p></li></ul></li><li><h4 id="v-model的使用"><a href="#v-model的使用" class="headerlink" title="v-model的使用"></a>v-model的使用</h4><ul><li><p><code>v-bind</code>：单向绑定</p></li><li><p><code>v-model</code>：双向绑定</p></li></ul></li><li><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>模板语法内如果添加特别复杂的逻辑，就让模板表达式比较重而且难以维护，对于任何复杂逻辑，都应当使用计算属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str:&#x27;123&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">     changeStr()&#123;</span><br><span class="line">       return this.str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>计算属性（computed）是基于他们的响应式依赖进行缓存的</strong></p><ul><li><strong>【面试题】computed 和 methods 区别</strong><ul><li>computed是有缓存的（如果计算的属性没有发生变化，则执行缓存数据）</li><li>methods是没有缓存的（也就是template只要render了 [或者重复render] 就会执行methods内所有的方法）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;!-- &#123;&#123;  changeStr  &#125;&#125; --&gt;</span><br><span class="line">      单价：</span><br><span class="line">      &lt;input type=&quot;&quot; name=&quot;&quot; v-model=&#x27;price&#x27;&gt; </span><br><span class="line">      数量：</span><br><span class="line">      &lt;input type=&quot;&quot; name=&quot;&quot; v-model=&#x27;num&#x27;&gt; </span><br><span class="line">      总价：&#123;&#123;  total  &#125;&#125;</span><br><span class="line">      &lt;hr /&gt;</span><br><span class="line">      &#123;&#123; str &#125;&#125;</span><br><span class="line">      &lt;button @click=&#x27;btn&#x27;&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //str:&#x27;123&#x27;</span><br><span class="line">      price:&#x27;11&#x27;,</span><br><span class="line">      num:2,</span><br><span class="line">      str:&#x27;你好&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    total()&#123;</span><br><span class="line">      console.log(&#x27;computed&#x27;);</span><br><span class="line">      return this.price * this.num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line">      this.str = &#x27;不好&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">    totalConut()&#123;</span><br><span class="line">      console.log( &#x27;methods&#x27; );</span><br><span class="line">      return this.price * this.num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // computed:&#123;</span><br><span class="line">  //   changeStr()&#123;</span><br><span class="line">  //     return this.str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="class和style"><a href="#class和style" class="headerlink" title="class和style"></a>class和style</h4><ol><li><h5 id="class"><a href="#class" class="headerlink" title="class"></a>class</h5><ol><li><p>对象的写法</p><p><code>:class=&#39;&#123; class名称:true|false &#125;&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27; :class=&#x27;&#123;active:false&#125;&#x27;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>用于判断各种赋值的</p><p><code>:class=&#39; currentClass == index ? &quot;active&quot; : &quot;&quot; &#39;</code></p><p>点击某一个加上颜色</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27; </span><br><span class="line">            :class=&#x27; currentClass == index ? &quot;active&quot; : &quot;&quot; &#x27;</span><br><span class="line">            @click=&#x27;btn(index)&#x27;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">            currentClass:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btn(index)&#123;</span><br><span class="line">            this.currentClass = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组的写法</p><p><code>&lt;div :class=&#39;[activeClass]&#39;&gt;&lt;/div&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27; </span><br><span class="line">            :class=&#x27; currentClass == index ? &quot;active&quot; : &quot;&quot; &#x27;</span><br><span class="line">            @click=&#x27;btn(index)&#x27;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">        &lt;div :class=&#x27;[activeClass]&#x27;&gt;</span><br><span class="line">            aaa</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">            currentClass:0,</span><br><span class="line">            activeClass:&quot;active&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btn(index)&#123;</span><br><span class="line">            this.currentClass = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27; </span><br><span class="line">            :class=&#x27; currentClass == index ? &quot;active&quot; : &quot;&quot; &#x27;</span><br><span class="line">            @click=&#x27;btn(index)&#x27;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">        &lt;div :class=&#x27;[activeClass]&#x27;&gt;</span><br><span class="line">            aaa</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div :style=&#x27;styleClass&#x27;&gt;</span><br><span class="line">            这是style的写法</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">            currentClass:0,</span><br><span class="line">            activeClass:&quot;active&quot;,</span><br><span class="line">            styleClass:&#123;</span><br><span class="line">            background:&#x27;red&#x27;,</span><br><span class="line">            fontSize:&#x27;50px&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btn(index)&#123;</span><br><span class="line">            this.currentClass = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        background:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="img的src路径问题"><a href="#img的src路径问题" class="headerlink" title="img的src路径问题"></a>img的src路径问题</h4><p><code>img :src</code> 一旦是绑定的数据，那么他会类似于请求的数据了，需要从路径上查找</p><ul><li><p>没有绑定在src目录下找</p><p><code>&lt;img src=&quot;./assets/img/log0.png&quot;&gt;</code></p></li><li><p>绑定了在public目录下找</p><p><code>&lt;img :src=&quot;&quot;&gt;</code></p></li></ul></li><li><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><ol><li><h5 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h5><p><code>v-on:事件名称=&#39;&#39;</code></p><p>简写：</p><p><code>@事件名称=&#39;&#39;</code></p></li><li><h5 id="vue中的事件-—-和dom事件一致"><a href="#vue中的事件-—-和dom事件一致" class="headerlink" title="vue中的事件 —- 和dom事件一致"></a>vue中的事件 —- 和dom事件一致</h5><p>click、mouseover</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div class=&#x27;main&#x27; @click=&#x27;btn($event,&quot;你好&quot;)&#x27; &gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&#x27;main&#x27; @mouseover=&#x27;overBtn&#x27; @mouseout=&#x27;outBtn&#x27;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=&quot;&quot; name=&quot;&quot; @keyup.enter=&#x27;upBtn&#x27;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    btn( e,val )&#123;</span><br><span class="line">      console.log(e,val);</span><br><span class="line">    &#125;,</span><br><span class="line">    overBtn()&#123;</span><br><span class="line">      alert(&#x27;移入&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    outBtn()&#123;</span><br><span class="line">      alert(&#x27;移出&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    upBtn()&#123;</span><br><span class="line">      alert(&#x27;111111&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>.stop、.prevent、.capture、.self、.once、.passive</p><p><code>&lt;input type=&quot;&quot; name=&quot;&quot; @keyup.enter=&#39;upBtn&#39;&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div class=&#x27;main&#x27; @click=&#x27;btn($event,&quot;你好&quot;)&#x27; &gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&#x27;main&#x27; @mouseover=&#x27;overBtn&#x27; @mouseout=&#x27;outBtn&#x27;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=&quot;&quot; name=&quot;&quot; @keyup.enter=&#x27;upBtn&#x27;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&#x27;container&#x27; @click=&#x27;parentNode&#x27;&gt;</span><br><span class="line">        &lt;div class=&#x27;main&#x27; @click.stop=&#x27;childNode&#x27;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    btn( e,val )&#123;</span><br><span class="line">      console.log(e,val);</span><br><span class="line">    &#125;,</span><br><span class="line">    overBtn()&#123;</span><br><span class="line">      alert(&#x27;移入&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    outBtn()&#123;</span><br><span class="line">      alert(&#x27;移出&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    upBtn()&#123;</span><br><span class="line">      alert(&#x27;111111&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    parentNode()&#123;</span><br><span class="line">      alert(&#x27;父&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    childNode()&#123;</span><br><span class="line">      alert(&#x27;子&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="Vue项目做自适应"><a href="#Vue项目做自适应" class="headerlink" title="Vue项目做自适应"></a>Vue项目做自适应</h4><ul><li><p>局部引入（单独某一页面生效）.vue文件中引入</p></li><li><p>在main.js中全局引入   <code>import &#39;./assets/js/flexible.js&#39;</code></p></li></ul></li></ol><h2 id="三、Vue组件"><a href="#三、Vue组件" class="headerlink" title="三、Vue组件"></a>三、Vue组件</h2><ol><li><h4 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h4><p>把较大的网页，进行功能模块的拆分</p><ol><li><h5 id="组件的操作"><a href="#组件的操作" class="headerlink" title="组件的操作"></a>组件的操作</h5><p>组件的首字母要大写</p><p>父组件引入子组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">        &lt;Swiper&gt;&lt;/Swiper&gt;</span><br><span class="line">        &lt;Icons&gt;&lt;/Icons&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &#x27;./components/Header&#x27;</span><br><span class="line">import Swiper from &#x27;./components/Swiper&#x27;</span><br><span class="line">import Icons from &#x27;./components/Icons&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Header,</span><br><span class="line">        Swiper,</span><br><span class="line">        Icons</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h4><ul><li><p>父组件</p><p><code>&lt;Swiper :xxx=&#39;parentStr&#39;&gt;&lt;/Swiper&gt;</code></p><p>xxx 是一个名称 &#x3D; ‘ 这里是属性值 ‘</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Swiper from &#x27;./components/Swiper.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">parentStr:&#x27;这是父组件的数据&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">Swiper</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; xxx &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">props:[&#x27;xxx&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line">export default &#123;</span><br><span class="line">props:&#123;</span><br><span class="line">xxx:String,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="子组件传值给父组件"><a href="#子组件传值给父组件" class="headerlink" title="子组件传值给父组件"></a>子组件传值给父组件</h4><ul><li><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;Child @changeEvent=&#x27;fn&#x27;&gt;&lt;/Child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./components/Child&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fn(val)&#123;</span><br><span class="line">            alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        子组件:&#123;&#123; str &#125;&#125;</span><br><span class="line">        &lt;button @click=&#x27;btn&#x27;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            str:&#x27;这是子组件的数据&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btn()&#123;</span><br><span class="line">            // changeEvent自定义事件名称</span><br><span class="line">            this.$emit(&#x27;changeEvent&#x27;,this.str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="兄弟组件之间的传值（bus）"><a href="#兄弟组件之间的传值（bus）" class="headerlink" title="兄弟组件之间的传值（bus）"></a>兄弟组件之间的传值（bus）</h4><ul><li><p>bus.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure></li><li><p>A.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        AAA</span><br><span class="line">        &lt;button @click=&#x27;btn&#x27;&gt;这是A的按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#x27;./bus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            aStr:&#x27;这是A的数据&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        btn()&#123;</span><br><span class="line">            bus.$emit(&#x27;changeStr&#x27;,this.aStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>B.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        BBB</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bus from &#x27;./bus&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        bStr()&#123;</span><br><span class="line">            bus.$on(&quot;changeStr&quot;,(res)=&gt;&#123;</span><br><span class="line">                alert(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            return 111;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="scoped以及原理"><a href="#scoped以及原理" class="headerlink" title="scoped以及原理"></a>scoped以及原理</h4><ol><li><p>组件内样式局部化：</p><p><code>&lt;style scoped&gt;&lt;/style&gt;</code></p></li><li><p>原理</p><p>加入了scoped，就会在节点上添加自定义属性 <code>data-v-xxx</code></p><p>css选择器，根据属性选择最终添加样式</p></li></ol></li><li><h4 id="slot使用以及场景"><a href="#slot使用以及场景" class="headerlink" title="slot使用以及场景"></a>slot使用以及场景</h4><p>Header.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span> <span class="attr">title</span>=<span class="string">&#x27;分类&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用场景：</p><p><img src="/../image/Vue/image-20240725160914310.png" alt="image-20240725160914310"></p><p><img src="/../image/Vue/image-20240725160946389.png" alt="image-20240725160946389"></p></li><li><h4 id="Vue插件的使用（swiper插件为例）"><a href="#Vue插件的使用（swiper插件为例）" class="headerlink" title="Vue插件的使用（swiper插件为例）"></a>Vue插件的使用（swiper插件为例）</h4><ol><li><p>下载</p><p><code>npm install vue-awesome-swiper -S</code></p></li><li><p>引入</p><ul><li><p>全局引入在main.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueAwesomeSwiper</span> <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/css/swiper.css&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAwesomeSwiper</span>)</span><br></pre></td></tr></table></figure></li><li><p>局部按需引入：单组件引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/css/swiper.css&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; swiper, swiperSlide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">swiper,</span><br><span class="line">swiperSlide</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置</p><p>相关文档</p></li></ol></li><li><h4 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h4><ol><li><p>通用（在选择器前面加入）：<code>::v-deep</code></p></li><li><p>stylus：<code>&gt;&gt;&gt;</code></p></li><li><p>sass和less：<code>/deep/</code></p></li></ol></li></ol><h2 id="四、生命周期和接口请求"><a href="#四、生命周期和接口请求" class="headerlink" title="四、生命周期和接口请求"></a>四、生命周期和接口请求</h2><ol><li><h4 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><ol><li><p>是什么？</p><p>vue中每一个组件都是独立的，每一个组件都有自己的生命周期，从一个组件创建、数据初始化、挂载、更新、销毁</p></li><li><p>有哪些？</p><p>beforeCreate、created</p><p>beforeMount、mounted</p><p>beforeUpdate、updated</p><p>beforeDestroy、destroyed</p></li><li><p>打开一个组件会执行哪些生命周期</p><p>beforeCreate、created</p><p>beforeMount、mounted</p><p><strong><code>this.$data</code>：组件的data数据 、created时有</strong></p><p><strong><code>this.$el</code>：组件的template节点、mounted时有</strong></p></li></ol></li><li><h4 id="axios和代理配置"><a href="#axios和代理配置" class="headerlink" title="axios和代理配置"></a>axios和代理配置</h4><p>vue项目中axios进行接口的请求</p><ol><li><p>下载</p><p><code>npm install axios -S</code></p></li><li><p>引入</p><p>在main.js中</p><p><code>import axios from &#39;axios&#39;</code></p><p><code>Vue.prototype.axios = axios;</code></p></li><li><p>使用</p><ul><li><p>GET</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27;&gt;</span><br><span class="line">    &#123;&#123; item.name &#125;&#125;</span><br><span class="line">                &lt;img :src=&quot;item.mgurl&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    components:&#123;</span><br><span class="line">        HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.axios(&#123;</span><br><span class="line">            url:&#x27;xxx&#x27;,</span><br><span class="line">            params:&#123;</span><br><span class="line">                page:1,</span><br><span class="line">                size:3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(res=&gt;&#123;</span><br><span class="line">            this.list = res.data.data</span><br><span class="line">            // console.log(res.data.data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>POST</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27;&gt;</span><br><span class="line">    &#123;&#123; item.name &#125;&#125;</span><br><span class="line">                &lt;img :src=&quot;item.mgurl&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    components:&#123;</span><br><span class="line">        HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.axios(&#123;</span><br><span class="line">            url:&#x27;xxx&#x27;,</span><br><span class="line">            method:&quot;POST&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                page:1,</span><br><span class="line">                size:3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(res=&gt;&#123;</span><br><span class="line">            this.list = res.data.data</span><br><span class="line">            // console.log(res.data.data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>vue项目在开发阶段设置代理</p><ol><li><p>项目根目录需要新建vue.config.js</p></li><li><p>配置代理</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">                <span class="comment">// target:&#x27;&lt;url&gt;&#x27;,</span></span><br><span class="line">                <span class="attr">target</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// /api === http://localhost:3000</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>后端</p><ol><li><p>全局安装</p><p><code>npm install express-generator -g</code></p></li><li><p>创建项目</p><p><code>express --view=ejs 项目名称</code></p></li><li><p>安装依赖</p><p><code>cd server</code></p><p><code>npm install</code></p><p><code>npm start</code></p></li><li><p>后端接口</p><p>server &#x2F; routes &#x2F; index.js</p></li></ol></li></ol></li></ol><h2 id="五、Vue路由"><a href="#五、Vue路由" class="headerlink" title="五、Vue路由"></a>五、Vue路由</h2><ol><li><h4 id="路由安装和介绍"><a href="#路由安装和介绍" class="headerlink" title="路由安装和介绍"></a>路由安装和介绍</h4><p>（router、单页面应用、SPA）</p><p>单页面应用：一个url（只有一个html）</p><ul><li><p>跳转不同组件</p></li><li><p>路径传值（url传值）</p></li><li><p>拦截</p><hr></li></ul><ol><li><p>使用</p><p><code>vue create 项目名称</code></p><p>选择自定义安装：安装Router</p><p>目录结构：</p><ul><li>router &#x2F; index.js：路由的配置</li><li>views：页面（组件）</li><li>components：页面模块（页面中的组件）</li></ul></li></ol></li><li><h4 id="router-link相关配置"><a href="#router-link相关配置" class="headerlink" title="router-link相关配置"></a>router-link相关配置</h4><ol><li><p>to：表示目标路由的链接</p><ul><li><p>跳转形式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span> <span class="attr">tag</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;&#123;path:&quot;/my&quot;&#125;&#x27;</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;&#123;name:&quot;Cart&quot;&#125;&#x27;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>路径传值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;&#123; name:&quot;Cart&quot;, query:&#123;a:1&#125; &#125;&#x27;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>tag：默认生成a标签，如果希望修改 <code>tag=&#39;li&#39;</code></p></li><li><p>组件形式的跳转方式</p><p>replace</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;&#123; path:&quot;Cart&quot; replace &#125;&#x27;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>append</p></li><li><p>exact：精准路由匹配模式</p></li><li><p>js的跳转方式</p><p><code>router.push</code>：打开新页面，并且可以返回上一页</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/list&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>router.replace</code>：打开新页面，不能返回上一页</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/list&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>router.go</code>：打开新页面，跳转几层</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>();</span><br></pre></td></tr></table></figure><p><code>router.back</code>：返回上一页</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>();</span><br></pre></td></tr></table></figure><p>传值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;selectList&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="router内文件配置"><a href="#router内文件配置" class="headerlink" title="router内文件配置"></a>router内文件配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">    <span class="comment">// 直接引入</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">    <span class="comment">// 二级路由</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 懒加载路由</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;About&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;*&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/&#x27;</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="路径传值"><a href="#路径传值" class="headerlink" title="路径传值"></a>路径传值</h4><ol><li><p>传值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">       <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>接收</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">a</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="导航守卫（拦截）"><a href="#导航守卫（拦截）" class="headerlink" title="导航守卫（拦截）"></a>导航守卫（拦截）</h4><ol><li><p>全局</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeRouteUpdate</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由独享</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><code>to</code>：这是你跳转到哪个路由对象</p><p><code>from</code>：这是你要离开的路由对象</p><p><code>next</code>：是一个方法，可以接受参数，这个方法必须调用</p><ul><li><p><code>next()</code>：告诉保安要过去，去哪里就是to</p></li><li><p><code>next(false)</code>：可以不通过，中断跳转</p></li><li><p><code>next(&#39;/&#39;)</code>：保安不让过，你可以去另一个地方进行通过</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">name</span> == <span class="string">&#x27;About&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!userInfo)&#123;</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="watch：监听"><a href="#watch：监听" class="headerlink" title="watch：监听"></a>watch：监听</h4><ol><li><p>监听路由的变化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    $route(to,<span class="keyword">from</span>)&#123;</span><br><span class="line">        <span class="comment">// to:最新的路由</span></span><br><span class="line">        <span class="comment">// from:上一次的路由</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>, <span class="keyword">from</span>.<span class="property">path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听数据的变化</p><p>监听b但是是b的c改变了，所以要监听b内所有的属性变化，就要用到深度监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;A:&#123;&#123;  a &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;B:&#123;&#123;  b.c &#125;&#125;  &lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&#x27;btn&#x27;&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">a:1,</span><br><span class="line">b:&#123;</span><br><span class="line">c:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">btn()&#123;</span><br><span class="line">this.a = 2;</span><br><span class="line">this.b.c = 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line"></span><br><span class="line">a(to,from)&#123;</span><br><span class="line">//to   ==&gt; 最新的</span><br><span class="line">//from ==&gt; 上一次的</span><br><span class="line">console.log(to,from)</span><br><span class="line">&#125;,</span><br><span class="line">b:&#123;</span><br><span class="line">handler(to)&#123;</span><br><span class="line">console.log(&#x27;B:&#x27;,to.c)</span><br><span class="line">&#125;,</span><br><span class="line">//深度监听</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="六、Vuex"><a href="#六、Vuex" class="headerlink" title="六、Vuex"></a>六、Vuex</h2><p>vuex：状态管理（集中式存储管理应用的所有组件的状态）</p><p>vuex的属性：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">state</span>: &#123;&#125;,       <span class="comment">// 放入数据[类似于组件中的data]</span></span><br><span class="line"><span class="attr">getters</span>: &#123;&#125;,     <span class="comment">// 就是一个计算属性[类似于组件中的computed]</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;&#125;,   <span class="comment">// 就是一个存放方法的[类似于组件中的methods]</span></span><br><span class="line"><span class="attr">actions</span>: &#123;&#125;,     <span class="comment">// Action 类似于 mutation [Action 提交的是 mutation，而不是直接变更状态。]</span></span><br><span class="line"><span class="attr">modules</span>: &#123;&#125;,     <span class="comment">// 分成多个模块，每个模块都有state、getters、mutations、actions</span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Vuex中的state"><a href="#Vuex中的state" class="headerlink" title="Vuex中的state"></a>Vuex中的state</h4><p>state数据如何拿到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方式一</span><br><span class="line">&#123;&#123; $store.state.a &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方式二</span><br><span class="line">&#123;&#123; a &#125;&#125;</span><br><span class="line">&#123;&#123; b &#125;&#125;</span><br><span class="line">&#123;&#123; arr &#125;&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">computed:&#123;</span><br><span class="line">        ...mapState([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;arr&#x27;])</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="Vuex中的getters"><a href="#Vuex中的getters" class="headerlink" title="Vuex中的getters"></a>Vuex中的getters</h4><p>&#x2F; store &#x2F; index.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  <span class="attr">list</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">goods_id</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">goods_name</span>:<span class="string">&#x27;鞋&#x27;</span>,</span><br><span class="line">  <span class="attr">goods_num</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">goods_price</span>:<span class="number">299</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">goods_id</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">goods_name</span>:<span class="string">&#x27;衣服&#x27;</span>,</span><br><span class="line">  <span class="attr">goods_num</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">goods_price</span>:<span class="number">49</span></span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">  <span class="title function_">total</span>(<span class="params"> state </span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">num</span>:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  state.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//总价</span></span><br><span class="line">  obj.<span class="property">count</span> += v.<span class="property">goods_num</span> * v.<span class="property">goods_price</span>;</span><br><span class="line">  <span class="comment">//总数量</span></span><br><span class="line">  obj.<span class="property">num</span> += v.<span class="property">goods_num</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">共:&#123;&#123; total.num &#125;&#125;</span><br><span class="line">总计:&#123;&#123; total.count &#125;&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState, mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">computed:&#123;</span><br><span class="line">        ...mapState([&#x27;list&#x27;]),</span><br><span class="line">        ...mapGetters([&#x27;total&#x27;])</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="Vuex中的mutations"><a href="#Vuex中的mutations" class="headerlink" title="Vuex中的mutations"></a>Vuex中的mutations</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">  &lt;h1&gt;这是首页Home&lt;/h1&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27;&gt;</span><br><span class="line">  &#123;&#123;item.appName&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;mapMutations,mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  created()&#123;</span><br><span class="line">  this.getData();</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">  ...mapState([&#x27;list&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  ...mapMutations([&#x27;initData&#x27;]),</span><br><span class="line">  getData()&#123;</span><br><span class="line"></span><br><span class="line">  axios(&#123;</span><br><span class="line">  url:&#x27;http://39.101.217.150:8075/apps/list&#x27;,</span><br><span class="line">  params:&#123;</span><br><span class="line">  page:1,</span><br><span class="line">  size:3</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;).then(res=&gt;&#123;</span><br><span class="line">  this.initData(res.data.data.records);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">list</span>:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">initData</span>(<span class="params"> state , data </span>)&#123;</span><br><span class="line">  state.<span class="property">list</span> = data;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">changeBtn</span>(<span class="params"> state </span>)&#123;</span><br><span class="line">  state.<span class="property">a</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="Vuex中的actions"><a href="#Vuex中的actions" class="headerlink" title="Vuex中的actions"></a>Vuex中的actions</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&#x27;(item,index) in list&#x27; :key=&#x27;index&#x27;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; :checked=&#x27;item.checked&#x27;&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;label @click=&#x27;checkedFn&#x27;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; :checked=&#x27;checkAll&#x27;/&gt;全选</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">import &#123;mapState,mapGetters,mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">computed:&#123;</span><br><span class="line">...mapState([&#x27;list&#x27;]),</span><br><span class="line">...mapGetters([&#x27;checkAll&#x27;])</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">...mapActions([&#x27;checkedFn&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  <span class="attr">list</span>:[  <span class="comment">//===&gt; length 6</span></span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">checked</span>:<span class="literal">false</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">selectedList</span>:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="title function_">checkAll</span>(<span class="params"> state </span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> state.<span class="property">list</span>.<span class="property">length</span> == state.<span class="property">selectedList</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">//全选</span></span><br><span class="line">  <span class="title function_">checkAll</span>(<span class="params"> state </span>)&#123;</span><br><span class="line">  state.<span class="property">selectedList</span> = state.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  v.<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//全不选</span></span><br><span class="line">  <span class="title function_">unCheckAll</span>(<span class="params"> state </span>)&#123;</span><br><span class="line">  state.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  v.<span class="property">checked</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  state.<span class="property">selectedList</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">checkedFn</span>(<span class="params">&#123;commit,getters&#125;</span>)&#123;</span><br><span class="line"></span><br><span class="line">  getters.<span class="property">checkAll</span> ? <span class="title function_">commit</span>(<span class="string">&#x27;unCheckAll&#x27;</span>) : <span class="title function_">commit</span>(<span class="string">&#x27;checkAll&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>mapState</code>、<code>mapGetters</code>放在组件中的computed中</strong></p></li><li><p><strong><code>mapMutations</code>、<code>mapActions</code>放在组件中的methods中</strong></p></li></ul></li><li><h4 id="actions和mutations的区别【面试题】"><a href="#actions和mutations的区别【面试题】" class="headerlink" title="actions和mutations的区别【面试题】"></a>actions和mutations的区别【面试题】</h4><ul><li><p>action 提交的是 mutation，而不是直接变更状态</p></li><li><p>mutations 是同步的、action 可以包含任意异步操作</p></li><li><p>action 更加容易调试</p></li></ul></li><li><h4 id="Vuex中的modules"><a href="#Vuex中的modules" class="headerlink" title="Vuex中的modules"></a>Vuex中的modules</h4><p>目录结构：</p><p><img src="/../image/Vue/image-20240726231609152.png" alt="image-20240726231609152"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;./modules/path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> order <span class="keyword">from</span> <span class="string">&#x27;./modules/order&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  path,</span><br><span class="line">  order</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// part.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"><span class="attr">state</span>:&#123;</span><br><span class="line"><span class="attr">list</span>:[<span class="string">&#x27;地址1&#x27;</span>,<span class="string">&#x27;地址2&#x27;</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>:&#123;&#125;,</span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line"><span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;../assets/logo.png&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&#x27;btn&#x27;&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    地址：&#123;&#123;pathList&#125;&#125;</span><br><span class="line">    订单：&#123;&#123;orderList&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">  pathList:state=&gt;state.path.list,</span><br><span class="line">  orderList:state=&gt;state.order.list</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  ...mapMutations([&#x27;btn&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="七、Vue面试题"><a href="#七、Vue面试题" class="headerlink" title="七、Vue面试题"></a>七、Vue面试题</h2><ol><li><h4 id="双向绑定的原理"><a href="#双向绑定的原理" class="headerlink" title="双向绑定的原理"></a>双向绑定的原理</h4><p>通过数据劫持结合发布者订阅者模式，使用Object.defineProperty方法对每个属性的get和set进行拦截，当数据发现变化时，发布消息给订阅者，触发相应的监听回调，实现视图和数据的双向同步更新</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(对象,<span class="string">&#x27;属性&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 设置劫持</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取劫持</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;btnInput&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#x27;h1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&#x27;h2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> btnInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnInput&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> h1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> h2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//只要赋值，给我console.log( &#x27;赋值了&#x27; )</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//obj.xx = &#x27;123&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;names&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//设置劫持</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">set</span>(<span class="params"> val </span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">h1.<span class="property">innerHTML</span> = val;</span></span><br><span class="line"><span class="language-javascript">h2.<span class="property">innerHTML</span> = val;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;设置&#x27;</span> );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">names=val;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取劫持</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> names;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">btnInput.<span class="property">oninput</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">obj.<span class="property">names</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Object-freeze性能优化"><a href="#Object-freeze性能优化" class="headerlink" title="Object.freeze性能优化"></a>Object.freeze性能优化</h4><p>用于冻结对象，禁止对于该对象的属性进行修改（由于数组本身也是对象，因此该方法可以对数组使用）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>，</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">page</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">size</span>:<span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="Vue生命周期-1"><a href="#Vue生命周期-1" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><ol><li><p>vue的生命周期有哪些</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeCreate</span><br><span class="line">created</span><br><span class="line">beforeMount</span><br><span class="line">mounted</span><br><span class="line">beforeUpdate</span><br><span class="line">updated</span><br><span class="line">beforeDestroy</span><br><span class="line">destroyed</span><br></pre></td></tr></table></figure></li><li><p>一旦进入组件或者页面，会执行哪些生命周期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeCreate</span><br><span class="line">created</span><br><span class="line">beforeMount</span><br><span class="line">mounted</span><br></pre></td></tr></table></figure></li><li><p>如果使用了keep-alive会多出来俩个生命周期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated</span><br><span class="line">deactivated</span><br></pre></td></tr></table></figure></li><li><p>如果使用了keep-alive第一次进入组件会执行5个生命周期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeCreate</span><br><span class="line">created</span><br><span class="line">beforeMount</span><br><span class="line">mounted</span><br><span class="line">activated</span><br></pre></td></tr></table></figure></li><li><p>如果使用了keep-alive第二次或者第N次，每次都会执行一个生命周期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a>v-show和v-if的区别</h4><ul><li>v-show：显示和隐藏 : <code>display:none</code>进行隐藏 、<code>display:block</code>进行显示</li><li>v-if：创建和删除：remove、append</li><li>区别：<ul><li>显示和隐藏用：v-show<br>创建和删除用：v-if</li><li>频繁切换用：v-show<br>不频繁切换用：v-if</li><li>首次加载：用v-if，不用v-show<ul><li>如果用v-if可以没有这个盒子，然后再通过v-if进行创建（但是第一次进入页面是没有这个盒子，是不加载的）。</li><li>如果用v-show这个盒子不管是显示还是隐藏，该盒子都是在的（节点都是存在）</li></ul></li></ul></li><li>使用场景：<ul><li>v-show ： 加入购物车、分享、蒙层这种都基本上用v-show<br>v-if : 首页栏目切换的时候v-if</li></ul></li></ul></li><li><h4 id="v-if和v-for的优先级"><a href="#v-if和v-for的优先级" class="headerlink" title="v-if和v-for的优先级"></a>v-if和v-for的优先级</h4><p><strong>v-for的优先级要比v-if的优先级高</strong></p><p>证明这个事情，是在vue.js源码中10997行</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (el.<span class="property">staticRoot</span> &amp;&amp; !el.<span class="property">staticProcessed</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genStatic</span>(el, state)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">once</span> &amp;&amp; !el.<span class="property">onceProcessed</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genOnce</span>(el, state)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">for</span> &amp;&amp; !el.<span class="property">forProcessed</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genFor</span>(el, state)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">if</span> &amp;&amp; !el.<span class="property">ifProcessed</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genIf</span>(el, state)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;template&#x27;</span> &amp;&amp; !el.<span class="property">slotTarget</span> &amp;&amp; !state.<span class="property">pre</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genChildren</span>(el, state) || <span class="string">&#x27;void 0&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;slot&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">genSlot</span>(el, state)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure><p><strong>注：v-if和v-for不要写在同一个节点上，这个性能很差。（v-if要写在父节点上）</strong></p></li><li><h4 id="ref、keep-alive、nextTick"><a href="#ref、keep-alive、nextTick" class="headerlink" title="ref、keep-alive、nextTick"></a>ref、keep-alive、nextTick</h4><ol><li><p><code>ref</code>：获取dom</p><p>场景：如果项目中使用插件，并且插件是要获取dom的，那么就可以使用ref了。</p></li><li><p><code>keep-alive</code>：缓存组件</p><p>一旦使用keep-alive会多两个生命周期，activated、deactivated</p><p>功能：提升性能的</p></li><li><p><code>nextTick</code>：当dom更新完毕执行内部代码</p><p>场景：使用插件的时候会用到。例如new Swiper这个插件可能会获取当前元素的宽度或者高度，等dom都加载完毕再去获取宽度和高度就不会有任何问题了。</p></li></ol></li><li><h4 id="computed、methods、watch区别"><a href="#computed、methods、watch区别" class="headerlink" title="computed、methods、watch区别"></a>computed、methods、watch区别</h4><ol><li><p><strong>computed：计算属性</strong></p><p>可以监听某些数据的变化，并且有缓存。</p><p>如果一进入页面调用，就会触发</p></li><li><p><strong>methods  ： 可以放入函数</strong></p><p>没有缓存</p><p>如果一进入页面调用，就会触发</p></li><li><p><strong>watch ：监听（路由和数据）</strong></p><p>当数据发生改变时，才会触发</p><p>可以得到现在的值和过去的值</p></li></ol></li><li><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><ol><li><p><strong>父传子</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;<span class="title class_">HelloWorld</span> :msg=<span class="string">&quot;str&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">:msg</span>=<span class="string">&quot;str&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">子：</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>]</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line"><span class="attr">msg</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>子传父</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line">&lt;button @click=<span class="string">&quot;changeParentName&quot;</span>&gt;改变父组件的name&lt;/button&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">//子组件的事件</span></span><br><span class="line">        <span class="attr">changeParentName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleChange&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>) <span class="comment">// 触发父组件中handleChange事件并传参Jack</span></span><br><span class="line">            <span class="comment">// 注：此处事件名称与父组件中绑定的事件名称要一致</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">父：</span><br><span class="line">&lt;child @handleChange=<span class="string">&quot;changeName&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">name</span>) &#123;  <span class="comment">// name形参是子组件中传入的值Jack</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>兄弟组件传值</strong></p><p>创建bus作为中转</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A组件：</span><br><span class="line">&lt;button @click=<span class="string">&#x27;btn&#x27;</span>&gt;<span class="title class_">HelloWorld</span>按钮&lt;/button&gt;</span><br><span class="line"><span class="title function_">data</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">hlStr</span>:<span class="string">&quot;这是helloWorld组件的数据&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line">      bus.$emit(<span class="string">&#x27;selectItem&#x27;</span>,<span class="variable language_">this</span>.<span class="property">hlStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B组件：</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">bus.$on(<span class="string">&#x27;selectItem&#x27;</span>,<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( val , <span class="number">1111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h4><p>使用场景：组件中有些地方的布局可能大多一致，但是细微有些小小变化</p></li><li><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ol><li><p><strong>SPA单页面应用和传统页面跳转有什么区别？</strong></p><p>SPA跳转是一个页面进行切换</p><p>传统页面跳转就是跳转不同的html了</p><p>SPA对于seo部分不是特别好，只能收录一个</p><p>传统的页面对于seo比较好，多个html文件收录</p></li><li><p><strong>路径传值</strong></p><p>显示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">传：</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>:&#123;</span><br><span class="line">          <span class="attr">key</span>:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">接：</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span></span><br></pre></td></tr></table></figure><p>隐示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">传：</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">          <span class="attr">key</span>:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">接：</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span></span><br></pre></td></tr></table></figure></li><li><p><strong>路由的模式</strong></p><p>mode: “history”   <a href="http://localhost:8080/about">http://localhost:8080/about</a></p><p>mode:”hash”       <a href="http://localhost:8080/#/about">http://localhost:8080/#/about</a></p></li><li><p><strong>路由导航守卫（拦截、路由钩子函数）</strong></p><p>全局</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeEach</span><br><span class="line">beforeResolve</span><br><span class="line">afterEach</span><br></pre></td></tr></table></figure><p>路由独享</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeEnter</span><br></pre></td></tr></table></figure><p>组件内</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter</span><br><span class="line">beforeRouteUpdate (2.2 新增)</span><br><span class="line">beforeRouteLeave</span><br></pre></td></tr></table></figure><p><strong>场景：要去拦截，判断用户是否是登录状态。功能：进入地址管理，用户如果没有登录是进入不了地址管理（在进入之前判断拦截），需要先登录。</strong></p></li><li><p><strong>子路由、动态路由</strong></p><p>子路由：<code>children</code><br>动态路由：<code>path: &#39;/user/:id&#39;</code></p></li></ol></li><li><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><ol><li><p><strong>Vuex有哪些部分构成</strong></p><p>state、getters、mutations、actions、modules</p></li><li><p><strong>什么场景用Vuex</strong></p><p>共享、方便管理、方便维护、组件传值……</p><p>项目：购物车数据，订单数据，用户的登录信息….</p></li><li><p><strong>mutations和actions的区别</strong></p><p>本质区别：<br>mutations必须是同步函数<br>actions“可以包含”任意异步操作</p><p>使用区别：mutations中可以放入函数，actions也可以放入函数，但是一般我们在mutations中放入函数而actions是提交mutations</p></li></ol></li><li><h4 id="v-model双向绑定原理"><a href="#v-model双向绑定原理" class="headerlink" title="v-model双向绑定原理"></a>v-model双向绑定原理</h4><p>通过Object.defineProperty劫持数据发生的改变，如果数据发生改变了（在set中进行赋值的），触发update方法进行更新节点内容（），从而实现了数据双向绑定的原理。</p></li><li><h4 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h4><p>功能：提升性能</p><p>虚拟dom —-&gt; 其实就是数据（ 把dom数据化 ）</p><p><strong>主流：snabbdom、virtual-dom</strong></p><p>snabbdom：<a href="https://www.npmjs.com/package/snabbdom">https://www.npmjs.com/package/snabbdom</a></p><ol><li><p><strong>搭建环境</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">cnpm install webpack@5 webpack-cli@3 webpack-dev-server@3 -S</span><br><span class="line"></span><br><span class="line">cnpm install snabbdom -S</span><br><span class="line"></span><br><span class="line">新建webpack.config.js</span><br><span class="line"></span><br><span class="line">配置webpack.config.js</span><br></pre></td></tr></table></figure></li><li><p><strong>虚拟节点 和  真实节点</strong></p><p>虚拟节点：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">elm</span>: h1</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">undefined</span></span><br><span class="line">  <span class="attr">sel</span>: <span class="string">&quot;h1&quot;</span></span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;你好h1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实节点：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>新老节点替换的规则</strong></p><ol><li><p>如果新老节点不是同一个节点名称，那么就暴力删除旧的节点，创建插入新的节点。</p></li><li><p>只能同级比较，不能跨层比较。如果跨层那么就暴力删除旧的节点，创建插入新的节点。</p></li><li><p>如果是相同节点，又分为很多情况</p><ol><li><p>新节点有没有children</p><p>如果新的节点没有children，那就证明新节点是文本，那直接把旧的替换成新的文本</p></li><li><p>新节点有children</p><p>新的有children，旧的也有children —-&gt; 就是diff算法的核心了【3】<br>新的有children，旧的没有 —-&gt; 创建元素添加（把旧的内容删除清空掉，增加新的）</p></li><li><p><strong>diff算法的核心（最复杂的情况）</strong></p><ol><li><p><strong>旧前 和 新前</strong></p><p>匹配：旧前的指针++ 、 新前的指针++</p></li><li><p><strong>旧后 和 新后</strong></p><p>匹配：旧后的指针– 、 新后的指针–</p></li><li><p><strong>旧前 和 新后</strong></p><p>匹配：旧前的指针++ 、 新后的指针–</p></li><li><p><strong>旧后 和 新前</strong></p><p>匹配：旧后的指针– 、 新前的指针++</p></li><li><p><strong>以上都不满足条件 —-&gt; 查找</strong></p><p>新的指针++，新的添加到页面上并且新在旧的种有，要给旧的复制成undefined</p></li><li><p><strong>创建或者删除</strong></p></li></ol></li></ol><p><strong>注意：如果要提升性能，一定要加入key，key是唯一标示，在更改前后，确认是不是同一个节点。</strong></p></li></ol></li></ol></li><li><h4 id="snabbdom"><a href="#snabbdom" class="headerlink" title="snabbdom"></a>snabbdom</h4></li><li><h4 id="手写diff算法-—-生成虚拟dom"><a href="#手写diff算法-—-生成虚拟dom" class="headerlink" title="手写diff算法 — 生成虚拟dom"></a>手写diff算法 — 生成虚拟dom</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h.js</span></span><br><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"> sel, data, params</span>)&#123;</span><br><span class="line">    <span class="comment">// h函数的 第三个参数是字符串类型，意味着没有子元素</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> params == <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, underfined, params, underfined)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))&#123;</span><br><span class="line">        <span class="keyword">let</span> children = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> params)&#123;</span><br><span class="line">            children.<span class="title function_">push</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, children, underfined, underfined)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./h&#x27;</span></span><br><span class="line"><span class="keyword">let</span> vnode1 = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode2 = <span class="title function_">h</span>(<span class="string">&#x27;ui&#x27;</span>, &#123;&#125;, [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;a&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;你好&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vnode2)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vode.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">sel, data, children, text, elm</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sel,</span><br><span class="line">        data,</span><br><span class="line">        children,</span><br><span class="line">        text,</span><br><span class="line">        elm</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="手写diff算法-—-patch不是同一个节点-—-相同节点有没有chrildren"><a href="#手写diff算法-—-patch不是同一个节点-—-相同节点有没有chrildren" class="headerlink" title="手写diff算法 — patch不是同一个节点 — 相同节点有没有chrildren"></a>手写diff算法 — patch不是同一个节点 — 相同节点有没有chrildren</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vode.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">sel, data, children, text, elm</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> key = data.<span class="property">key</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sel,</span><br><span class="line">        data,</span><br><span class="line">        children,</span><br><span class="line">        text,</span><br><span class="line">        elm,</span><br><span class="line">        key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        这是container</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./h&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">&#x27;./patch&#x27;</span></span><br><span class="line"><span class="comment">// 获取真实dom节点</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 虚拟节点</span></span><br><span class="line"><span class="keyword">let</span> vnode1 = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> vnode2 = <span class="title function_">h</span>(<span class="string">&#x27;ui&#x27;</span>, &#123;&#125;, [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="attr">key</span>:<span class="string">&#x27;a&#x27;</span>&#125;, <span class="string">&#x27;a&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="attr">key</span>:<span class="string">&#x27;b&#x27;</span>&#125;, <span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="attr">key</span>:<span class="string">&#x27;c&#x27;</span>&#125;, <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="attr">key</span>:<span class="string">&#x27;d&#x27;</span>&#125;, <span class="string">&#x27;d&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"><span class="title function_">patch</span>(container, vnode1);</span><br><span class="line"><span class="title function_">patch</span>(container, vnode2);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// patch.js</span></span><br><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">&#x27;./createElement&#x27;</span></span><br><span class="line"><span class="keyword">import</span> newVnode <span class="keyword">from</span> <span class="string">&#x27;./patchVnode&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">oldVnode, newVnode</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果oldVnode没有sel，就证明是虚拟节点（让他变成虚拟节点）</span></span><br><span class="line">    <span class="keyword">if</span>(oldVnode.<span class="property">sel</span> == underfined)&#123;</span><br><span class="line">        oldVnode = <span class="title function_">vnode</span>(</span><br><span class="line">        oldVnode.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(), <span class="comment">// sel</span></span><br><span class="line">            &#123;&#125;, <span class="comment">// data</span></span><br><span class="line">            [],</span><br><span class="line">            underfined,</span><br><span class="line">            oldVnode</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断两个节点是否是同一个节点</span></span><br><span class="line">    <span class="keyword">if</span>(oldVnode.<span class="property">sel</span> === newVnode.<span class="property">sel</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断条件复杂</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(oldVnode, newVnode);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 不是同一个节点，那么就暴力删除旧的节点，创建插入新的节点</span></span><br><span class="line">        <span class="comment">// 把新的虚拟节点创建为dom节点</span></span><br><span class="line">        <span class="keyword">let</span> newVnodeElm = <span class="title function_">createElement</span>(newVnode);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取旧的虚拟节点，elm就是真正的节点</span></span><br><span class="line">        <span class="keyword">let</span> oldVnodeElm = oldVnode.<span class="property">elm</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建新的节点</span></span><br><span class="line">        <span class="keyword">if</span>(newVnodeElm)&#123;</span><br><span class="line">            oldVnodeElm.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(newVnodeElm, oldVnodeElm)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除旧的节点</span></span><br><span class="line">        oldVnodeElm.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(oldVnodeElm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// createElement.js</span></span><br><span class="line"><span class="comment">// vnode为新节点，就是要创建的节点</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">vnode</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> domNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">sel</span>);</span><br><span class="line">    <span class="comment">// 判断有没有子节点 children 是不是为underfined</span></span><br><span class="line">    <span class="keyword">if</span>(vnode.<span class="property">children</span> == underfined)&#123;</span><br><span class="line">        domNode.<span class="property">innerText</span> = vnode.<span class="property">text</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode.<span class="property">children</span>))&#123;</span><br><span class="line">        <span class="comment">// 新的节点有children（子节点）,需要递归创建节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> child <span class="keyword">of</span> vnode.<span class="property">children</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> childDom = <span class="title function_">createElement</span>(child);</span><br><span class="line">            domNode.<span class="title function_">appendChild</span>(childDom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 补充elm属性</span></span><br><span class="line">    vnode.<span class="property">elm</span> = domNode;</span><br><span class="line">    <span class="keyword">return</span> domNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// patchVnode.js</span></span><br><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">&#x27;./createElement&#x27;</span></span><br><span class="line"><span class="keyword">import</span> updateChildren <span class="keyword">from</span> <span class="string">&#x27;./updateChildren&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, newVnode</span>)&#123;</span><br><span class="line">    <span class="comment">// 判断新节点有没有children</span></span><br><span class="line">    <span class="keyword">if</span>(newVnode.<span class="property">children</span> === underfined)&#123;</span><br><span class="line">        <span class="comment">// 没有子节点</span></span><br><span class="line">        <span class="comment">// 新节点的文本合旧节点的文本内容是不是一样的</span></span><br><span class="line">        <span class="keyword">if</span>(newVnode.<span class="property">text</span> !== oldVnode.<span class="property">text</span>)&#123;</span><br><span class="line">            oldVnode.<span class="property">elm</span>.<span class="property">innerText</span> = newVnode.<span class="property">text</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 有子节点</span></span><br><span class="line">        <span class="comment">// 新节点虚拟节点有，旧的虚拟节点有</span></span><br><span class="line">        <span class="keyword">if</span>(oldVnode.<span class="property">children</span> !== underfined &amp;&amp; oldVnode.<span class="property">children</span>.<span class="property">legth</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 最复杂，diff核心</span></span><br><span class="line">            <span class="title function_">updateChildren</span>(oldVnode.<span class="property">elm</span>, oldVnode.<span class="property">children</span>, newVnode.<span class="property">children</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 新节点虚拟节点有，旧的虚拟节点没有</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 把旧节点内容清空</span></span><br><span class="line">            oldVnode.<span class="property">elm</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 遍历新的子节点，创建dom元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> child <span class="keyword">of</span> newVnode.<span class="property">children</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> childDom = <span class="title function_">createElement</span>(child);</span><br><span class="line">                oldVnode.<span class="property">elm</span>.<span class="title function_">appendChild</span>(childDom);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// updateChildren.js</span></span><br><span class="line"><span class="keyword">import</span> patchVnode <span class="keyword">from</span> <span class="string">&#x27;./patchVnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">&#x27;./createElement&#x27;</span></span><br><span class="line"><span class="comment">// 判断两个虚拟节点是否为同一个节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sameVnode</span>(<span class="params">vNode1, vNode2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> vNode1.<span class="property">key</span> == vNode2.<span class="property">key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数1：真实dom节点</span></span><br><span class="line"><span class="comment">// 参数2：旧的虚拟节点</span></span><br><span class="line"><span class="comment">// 参数3：新的虚拟节点</span></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> (parentElm, oldCh, newCh) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>;                  <span class="comment">// 旧前指针</span></span><br><span class="line">    <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span>;     <span class="comment">// 旧后指针</span></span><br><span class="line">    <span class="keyword">let</span> newStartIdx = <span class="number">0</span>;                  <span class="comment">// 新前指针</span></span><br><span class="line">    <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span>;     <span class="comment">// 新后指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>];         <span class="comment">// 旧前虚拟节点</span></span><br><span class="line">    <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx];   <span class="comment">// 旧后虚拟节点</span></span><br><span class="line">    <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>];         <span class="comment">// 新前虚拟节点</span></span><br><span class="line">    <span class="keyword">let</span> newEndVnode = newCh[newEndIdx];   <span class="comment">// 新后虚拟节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx)&#123;</span><br><span class="line">        <span class="keyword">if</span>(oldStartVnode == underfined)&#123;</span><br><span class="line">            oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(oldEndVnode == underfined)&#123;</span><br><span class="line">            oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode))&#123;</span><br><span class="line">            <span class="comment">// 旧前 和 新前</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode);</span><br><span class="line">            <span class="keyword">if</span>(newStartVnode)&#123;</span><br><span class="line">                newStartVnode.<span class="property">elm</span> = oldStartVnode?.<span class="property">elm</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            oldStartVnode = oldCh[++oldStsrtIdx];</span><br><span class="line">            newStartVnode = newCh[++newStsrtIdx];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode))&#123;</span><br><span class="line">            <span class="comment">// 旧后 和 新后</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode);</span><br><span class="line">            <span class="keyword">if</span>(newEndVnode)&#123;</span><br><span class="line">                newEndVnode.<span class="property">elm</span> = oldEndVnode?.<span class="property">elm</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            oldEndVnode = oldCh[--oldEndVnode];</span><br><span class="line">            newEndVnode = newCh[--newEndVnode];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode))&#123;</span><br><span class="line">            <span class="comment">// 旧前 和 新后</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode);</span><br><span class="line">            <span class="keyword">if</span>(newEndVnode)&#123;</span><br><span class="line">                newEndVnode.<span class="property">elm</span> = oldStartVnode?.<span class="property">elm</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把旧前指定的节点移动到旧后指向的节点的后面</span></span><br><span class="line">            parentElm.<span class="title function_">insertBefore</span>(oldEndVnode.<span class="property">elm</span>, oldEndVnode.<span class="property">elm</span>.<span class="property">nextSibling</span>)</span><br><span class="line">            oldStartVnode = oldCh[++oldStartVnode];</span><br><span class="line">            newEndVnode = newCh[--newEndVnode];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode))&#123;</span><br><span class="line">            <span class="comment">// 旧后 和 新前</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode);</span><br><span class="line">            <span class="keyword">if</span>(newStartVnode)&#123;</span><br><span class="line">                newStartVnode.<span class="property">elm</span> = oldEndVnode?.<span class="property">elm</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把旧后指定的节点移动到旧前指向的节点的前面</span></span><br><span class="line">            parentElm.<span class="title function_">insertBefore</span>(oldStartVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">            oldEndVnode = oldCh[--oldEndVnode];</span><br><span class="line">            newStartVnode = newCh[++newStartVnode];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 以上都不满足查找</span></span><br><span class="line">            <span class="comment">// 创建一个对象，存虚拟节点（判断新旧有没有相节点）</span></span><br><span class="line">            <span class="keyword">const</span> keyMap = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++)&#123;</span><br><span class="line">                <span class="keyword">const</span> key = oldCh[i]?.<span class="property">key</span>;</span><br><span class="line">                <span class="keyword">if</span>(key)&#123;</span><br><span class="line">                    keyMap[key] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在旧节点中查找新前指向节点</span></span><br><span class="line">            <span class="keyword">let</span> idxInOld = keyMap[newStartVnode.<span class="property">key</span>];</span><br><span class="line">            <span class="comment">// 如果有，说明数据在新旧虚拟节点中都存在</span></span><br><span class="line">            <span class="keyword">if</span>(idxInOld)&#123;</span><br><span class="line">                <span class="keyword">const</span> elmMove = oldCh[idxInOld];</span><br><span class="line">                <span class="title function_">patchVnode</span>(elmMove, newStartVnode);</span><br><span class="line">                <span class="comment">// 处理过的节点，在旧虚拟系欸但的数组中，设置为underfined</span></span><br><span class="line">                oldCh[idxInOld] = underfined;</span><br><span class="line">                parentElm.<span class="title function_">insertBefore</span>(elmMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果没有找到，说明是一个新的节点（创建）</span></span><br><span class="line">                parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElement</span>(newStartVnode), oldStartVnode.<span class="property">elm</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            newStartVnode = newCh[++newStartIdx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束循环只有两种情况，新增和删除</span></span><br><span class="line">    <span class="comment">// 1、oldStartIdx &gt; oldEndIdx</span></span><br><span class="line">    <span class="comment">// 2、newStartIdx &gt; newEndIdx</span></span><br><span class="line">    <span class="keyword">if</span>(oldStartIdx &gt; oldEndIdx)&#123;</span><br><span class="line">        <span class="keyword">const</span> before = newCh[newEndIdx+<span class="number">1</span>] ? newCh[newEndIdx+<span class="number">1</span>].<span class="property">elm</span> : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = newStartIdx; i &lt;= newEndIdx; i++)&#123;</span><br><span class="line">            parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElement</span>(newCh[i]), before);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 进入删除操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++)&#123;</span><br><span class="line">            parentElm.<span class="title function_">removeChild</span>(oldCh[i].<span class="property">elm</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="谈一下MVVM框架"><a href="#谈一下MVVM框架" class="headerlink" title="谈一下MVVM框架"></a>谈一下MVVM框架</h4><h5 id="web1-0时代："><a href="#web1-0时代：" class="headerlink" title="web1.0时代："></a>web1.0时代：</h5><p>文件全在一起，就是前端和后端的代码全在一起</p><p>问题：</p><ul><li>前端和后端都是一个人开发，技术没有侧重点或者责任不够细分</li><li>项目不好维护</li><li>html、css、js页面的静态内容没有，后端是没办法工作的（没办法套数据）</li></ul><p>mvc…都是后端先出的</p><h5 id="web2-0时代："><a href="#web2-0时代：" class="headerlink" title="web2.0时代："></a>web2.0时代：</h5><p>ajax出现了，前端和后端数据分离了。</p><p>解决问题：后端不用等前端页面弄完没，后端做后端的事情（写接口），前端布局、特效、发送请求</p><p>问题：</p><ul><li>html、css、js都在一个页面中，单个页面可能内容也是比较多的（也会出现不好维护的情况）</li></ul><p><strong>出现前端的框架MVC、MVVM</strong></p><p>解决问题：可以把一个特别大的页面进行拆分（组件化），单个组件进行维护</p><h5 id="什么是MVVM："><a href="#什么是MVVM：" class="headerlink" title="什么是MVVM："></a>什么是MVVM：</h5><p>Model-View-ViewModel 的简写</p><p><img src="/../image/Vue/bg2015020110.png" alt="img"></p><p>view：视图【dom在页面中展示的内容】</p><p>model：模型【数据层：vue中的data数据】</p><p>ViewModel：视图模型层【就是vue源码】</p><p><img src="/../image/Vue/6e5b407e2c6e248dd6cb67d136986a8c.png" alt="img"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240822 16:27&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、Vue脚手架&quot;&gt;&lt;a href=&quot;#一、Vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;一、Vue脚手架&quot;&gt;&lt;/a&gt;一、Vue脚手架&lt;/h2&gt;&lt;p&gt;vue-c</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>算法:双指针</title>
    <link href="http://cychenhaibin.github.io/2024/08/20/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://cychenhaibin.github.io/2024/08/20/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2024-08-19T18:28:47.000Z</published>
    <updated>2024-08-19T18:30:58.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、移动零"><a href="#一、移动零" class="headerlink" title="一、移动零"></a>一、移动零</h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例1：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 2:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><ol><li>定义两个指针， left  和  right 。 left  从索引 0 开始， right  也从索引 0 开始。</li><li>遍历数组，使用  right  指针。</li><li>当  right  指针指向的元素不是零时：<ul><li>将  left  指针指向的元素（如果它是一个零）替换为  right  指针指向的元素。</li><li>将  left  指针向前移动一位。</li></ul></li><li>当  right  指针指向的元素是零时，继续向右移动  right  指针，直到找到一个非零元素或到达数组末尾。</li><li>重复步骤 3 和 4，直到  right  指针到达数组末尾。</li><li>当  right  指针遍历完成后， left  指针之前的所有元素都是非零的，并且保持了原始顺序。此时，将  left  指针之后的所有位置填充为零。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>; <span class="comment">// 初始化左指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> right = <span class="number">0</span>; right &lt; nums.<span class="property">length</span>; right++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[right] !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 交换 left 指针和 right 指针指向的元素</span></span><br><span class="line">            nums[left] = nums[right];</span><br><span class="line">            <span class="comment">// 只有当交换了元素后，left 指针才向前移动</span></span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用零填充 left 指针之后的所有位置</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        nums[left] = <span class="number">0</span>;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="二、盛最多水的容器"><a href="#二、盛最多水的容器" class="headerlink" title="二、盛最多水的容器"></a>二、盛最多水的容器</h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> </p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p><strong>示例1：</strong></p><p><img src="/../image/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/question_11.jpg" alt="img"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例2：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><ol><li>初始化两个指针  l  和  r ，分别指向数组  height  的起始和结束位置，即  l &#x3D; 0  和  r &#x3D; n - 1 。</li><li>定义一个变量  <code>maxWater</code>  来存储最大水量，初始值为 0。</li><li>当  l &lt; r  时，执行以下操作：<ul><li>计算当前左右指针高度的较小值，记为  <code>minHeight</code> 。</li><li>计算当前容器的容量，即  <code>minHeight</code>  和指针之间的距离（ r - l ）的乘积，记为  <code>currentWater</code> 。</li><li>如果  <code>currentWater</code>  大于  <code>maxWater</code> ，则更新  <code>maxWater</code> 。</li><li>如果左边的高度小于右边的高度，移动左指针  l  向右一位（ l++ ），否则移动右指针  r  向左一位（ r– ）。</li></ul></li><li>当  l  和  r  相遇或交叉时，结束循环。</li><li>返回  <code>maxWater</code> 。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>, r = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> maxWater = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">let</span> minHeight = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[l], height[r]);</span><br><span class="line">        <span class="keyword">let</span> currentWater = minHeight * (r - l);</span><br><span class="line">        maxWater = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxWater, currentWater);</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r]) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxWater;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="三、三数之和"><a href="#三、三数之和" class="headerlink" title="三、三数之和"></a>三、三数之和</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例1：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例2：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例3：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><ol><li><strong>排序</strong>：首先对数组  nums  进行排序。</li><li><strong>初始化</strong>：设置三个指针  i 、 left  和  right 。 i  从索引 0 开始遍历数组， left  和  right  分别指向  i  之后的两个端点。</li><li><strong>遍历</strong>：对于每个  i ：<ul><li>设置  left  为  i + 1 ， right  为数组的最后一个索引。</li><li>执行循环，当  left &lt; right  时：</li><li>计算当前三元组的和： sum &#x3D; nums[i] + nums[left] + nums[right] 。</li><li>如果  sum  等于 0，找到了一个满足条件的三元组，将其添加到结果列表中，然后将  left  和  right  向中间移动，同时跳过重复的元素。</li><li>如果  sum  小于 0，说明需要增大和，因此将  left  向右移动（寻找更大的数）。</li><li>如果  sum  大于 0，说明需要减小和，因此将  right  向左移动（寻找更小的数）。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 对数组进行排序</span></span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 跳过重复的元素</span></span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">                result.<span class="title function_">push</span>([nums[i], nums[left], nums[right]]);</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">                <span class="comment">// 跳过重复的元素</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left - <span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right + <span class="number">1</span>]) right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                left++; <span class="comment">// 需要增大和</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--; <span class="comment">// 需要减小和</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="四、接雨水"><a href="#四、接雨水" class="headerlink" title="四、接雨水"></a>四、接雨水</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例1：</strong></p><p><img src="/../image/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/rainwatertrap.png" alt="img"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure></blockquote><p><strong>示例2：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><ol><li><strong>初始化</strong>：创建两个数组  <code>leftMax</code>  和  <code>rightMax</code> ，它们的长度与输入数组  <code>height</code>  相同。 <code>leftMax[i]</code>  表示索引  i  左侧最高的柱子高度， <code>rightMax[i]</code>  表示索引  i  右侧最高的柱子高度。</li><li><strong>填充左侧最大高度数组</strong>：从左到右遍历  <code>height</code>  数组，对于每个索引  i ， <code>leftMax[i]</code>  初始化为  <code>height[i]</code> ，然后与  <code>leftMax[i-1]</code>  比较，取较大值。</li><li><strong>填充右侧最大高度数组</strong>：从右到左遍历  <code>height</code>  数组，对于每个索引  i ， <code>rightMax[i]</code>  初始化为  <code>height[i]</code> ，然后与  rightMax[i+1]  比较，取较大值。</li><li><strong>计算雨水量</strong>：遍历  <code>height</code>  数组，对于每个索引  i ，计算当前柱子能接的雨水量，即  <code>min(leftMax[i], rightMax[i]) - height[i]</code> 。如果这个值大于 0，累加到总雨水量  <code>total</code> 。</li><li><strong>返回总雨水量</strong>。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> trap = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = height.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> leftMax = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">    <span class="keyword">let</span> rightMax = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化左侧最大高度数组</span></span><br><span class="line">    leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        leftMax[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(height[i], leftMax[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化右侧最大高度数组</span></span><br><span class="line">    rightMax[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        rightMax[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(height[i], rightMax[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算雨水量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        total += <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(leftMax[i], rightMax[i]) - height[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、移动零&quot;&gt;&lt;a href=&quot;#一、移动零&quot; class=&quot;headerlink&quot; title=&quot;一、移动零&quot;&gt;&lt;/a&gt;一、移动零&lt;/h3&gt;&lt;p&gt;给定一个数组 &lt;code&gt;nums&lt;/code&gt;，编写一个函数将所有 &lt;code&gt;0&lt;/code&gt; 移动到数组的末尾</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法:哈希</title>
    <link href="http://cychenhaibin.github.io/2024/08/19/%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C/"/>
    <id>http://cychenhaibin.github.io/2024/08/19/%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C/</id>
    <published>2024-08-19T12:14:47.000Z</published>
    <updated>2024-08-19T12:41:27.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、两数之和"><a href="#一、两数之和" class="headerlink" title="一、两数之和"></a>一、两数之和</h3><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例1：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] </span><br></pre></td></tr></table></figure></blockquote><p><strong>示例2：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例3：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><p>给定一个数组，首先想到的是两次for循环，第一次for循环时拿到第一个元素，第二次for循环时拿到后面的元素，进行判断第一个元素和后面的元素加起来是否是目标值，是则添加到新数组中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>;j&lt;nums.<span class="property">length</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">               num.<span class="title function_">push</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="二、字母异位词分组"><a href="#二、字母异位词分组" class="headerlink" title="二、字母异位词分组"></a>二、字母异位词分组</h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例1：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 2:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 3:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><p>计数方法</p><p>由于互为字母异位词的两个字符串包含的字母相同，因此两个字符串中的相同字母出现的次数一定是相同的，故可以将每个字母出现的次数使用字符串表示，作为哈希表的键。</p><p>由于字符串只包含小写字母，因此对于每个字符串，可以使用长度为 26 的数组记录每个字母出现的次数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="comment">// 创建了一个长度为26的新数组 count ，并将每个元素初始化为0。</span></span><br><span class="line">        <span class="comment">// 用于存储每个字符出现的次数，其中索引0对应字符&#x27;a&#x27;，索引1对应字符&#x27;b&#x27;，依此类推，直到索引25对应字符&#x27;z&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> s) &#123;</span><br><span class="line">            <span class="comment">// 计算字符 c 的ASCII码值与字符&#x27;a&#x27;的ASCII码值之间的差</span></span><br><span class="line">            count[c.<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查 map 对象中是否已经有一个以当前字符串的字符计数数组为键的数组</span></span><br><span class="line">        <span class="comment">// 如果有，就将当前字符串添加到这个数组中；</span></span><br><span class="line">        <span class="comment">// 如果没有，就创建一个新的数组，并将这个数组与当前字符串关联起来作为 map 对象的一个新键值对。</span></span><br><span class="line">        map[count] ? map[count].<span class="title function_">push</span>(s) : map[count] = [s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(map);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="三、最长连续序列"><a href="#三、最长连续序列" class="headerlink" title="三、最长连续序列"></a>三、最长连续序列</h3><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例1：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例2：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure></blockquote><p><strong>题解：</strong></p><p>将数组元素存入 set 中<br>遍历<code>nums</code>，如果 当前项 - 1 存在于 set ，说明当前项不是连续序列的起点，忽略，继续遍历<br>如果当前项没有“左邻居”，它就是连续序列的起点，循环查看当前项连续的右邻居有多少个<br>返回最长的连续次数</p><p>此方法的时间复杂度为O(n)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 把题目中数组的数字全部放入set中，一来去重，二来方便快速查找</span></span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(nums);</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [key,a] <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="comment">// 没有左邻居，是序列的起点</span></span><br><span class="line">    <span class="keyword">if</span> (!set.<span class="title function_">has</span>(a - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> cur = a;</span><br><span class="line">      <span class="comment">// 有右邻居，看连续的右邻居有多少个</span></span><br><span class="line">      <span class="keyword">while</span> (set.<span class="title function_">has</span>(cur + <span class="number">1</span>)) &#123;</span><br><span class="line">        cur++;</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 存放最大的连续邻居的值</span></span><br><span class="line">      max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先将数组排序，设置计数器等于1，最长连续计数器等于1，如果数组的长度为0，则返回0，遍历数组，如果数组的第一个和他后面的一个值相同，就继续比较，类似 <code>Set</code> 方法，如果数组前一个值加一等于下一个的值，count就加一，否则重置计数器为1，每当遍历完一次回合都要更新一次 <code>maxCount</code> 计数器，将最长序列存储，遍历完成后，返回最长序列的长度</p><p>时间复杂度为O(nlogn)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 如果数组为空，返回0</span></span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 对数组进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>; <span class="comment">// 初始化连续序列的计数器</span></span><br><span class="line">    <span class="keyword">let</span> maxCount = <span class="number">1</span>; <span class="comment">// 初始化最长连续序列的计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123; <span class="comment">// 从第二个元素开始遍历</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素与前一个元素相同，则跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素是连续的，增加计数器</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素不是连续的，重置计数器</span></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxCount = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxCount, count); <span class="comment">// 更新最长连续序列的长度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxCount; <span class="comment">// 返回最长连续序列的长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、两数之和&quot;&gt;&lt;a href=&quot;#一、两数之和&quot; class=&quot;headerlink&quot; title=&quot;一、两数之和&quot;&gt;&lt;/a&gt;一、两数之和&lt;/h3&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数目标值 &lt;code&gt;target&lt;/code</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://cychenhaibin.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://cychenhaibin.github.io/2024/08/12/TypeScript/"/>
    <id>http://cychenhaibin.github.io/2024/08/12/TypeScript/</id>
    <published>2024-08-11T19:38:47.000Z</published>
    <updated>2024-08-11T19:38:42.130Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240812 03:38</p><hr><h2 id="一、基本类型"><a href="#一、基本类型" class="headerlink" title="一、基本类型"></a>一、基本类型</h2><ol><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数，形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值。否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值是同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1，-33，2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’，”hi”</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true，false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（underfined）</td><td align="center">没有值（或underfined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">{1,2,3}</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">{4,5}</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A,B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table></li><li><p>number</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>:<span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>:<span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>:<span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>:<span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>:<span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li><li><p>boolean</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>:<span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>string</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>:<span class="built_in">string</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>:<span class="built_in">string</span> = <span class="string">`Bob Bubbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>:<span class="built_in">string</span> = <span class="string">`Hello,my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li><li><p>字面量</p><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>|<span class="string">&#x27;blue&#x27;</span>|<span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>any</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>:<span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li><p>unknown</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>:unknow = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>void</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unsable</span>:<span class="built_in">void</span> = underfined;</span><br></pre></td></tr></table></figure></li><li><p>never</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"><span class="attr">message</span>:<span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>array</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2.3</span>];</span><br></pre></td></tr></table></figure></li><li><p>tuple</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:[<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>,<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>enum</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>:<span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>:<span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>:<span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>:<span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ol><h2 id="二、编译选项"><a href="#二、编译选项" class="headerlink" title="二、编译选项"></a>二、编译选项</h2><ol><li><h5 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h5><ul><li><p>编译文件时，使用-w指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译</p></li><li><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">tsc xxx.<span class="property">ts</span> -w</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h5><ul><li><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件</p></li><li><p>但是能直接使用tsc命令的前提是，要先在项目根目录下创建一个ts的配置文件tsconfig.json</p></li><li><p>tsconfig.json是一个JSON文件，添加配置文件后，只需tsc命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ol><li><h6 id="include"><a href="#include" class="headerlink" title="include"></a>include</h6><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：[“***&#x2F;*”]</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span><span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p></li></ul></li><li><h6 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h6><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”,”bower_components”,”jspm_packages”]</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p></li></ul></li><li><h6 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h6><ul><li><p>定义被继承的配置文件</p></li><li><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;extends&quot;</span>:<span class="string">&quot;./config/base&quot;</span></span><br></pre></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含config目录下base，json中的所有配置信息</p></li></ul></li><li><h6 id="files"><a href="#files" class="headerlink" title="files"></a>files</h6><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>列表中的文件都会被TS编译器所编译</p></li></ul></li><li><h6 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h6><ul><li><p>编译选项是配置文件中非常重要页比较复杂的配置选项</p></li><li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ol><li><p><strong>target</strong></p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES6、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span><span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p></li></ul></li><li><p><strong>lib</strong></p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li><p>ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、webWorker、ScriptHost……</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span><span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span><span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span><span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>module</strong></p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJs、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span><span class="string">&quot;CommonJS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>outDir</strong></p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置后编译后的js文件将会生成到dist目录</p></li></ul></li><li><p><strong>outFile</strong></p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>rootDir</strong></p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>allowJs</strong></p><ul><li>是否对js文件编译</li></ul></li><li><p><strong>checkJs</strong></p><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>removeComments</strong></p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p><strong>noEmit</strong></p><ul><li><p>不对代码进行编译</p></li><li><p>默认值：false</p></li></ul></li><li><p><strong>sourceMap</strong></p><ul><li><p>是否生成sourceMap</p></li><li><p>默认值：false</p></li></ul></li><li><p><strong>严格检查</strong></p><ul><li><p>strict</p><ul><li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li></ul></li><li><p>alwaysStrict</p><ul><li>总是以严格模式对代码进行编译</li></ul></li><li><p>noImplicitAny</p><ul><li>禁止隐式的any类型</li></ul></li><li><p>noImplicitThis</p><ul><li>禁止类型不明确的this</li></ul></li><li><p>strictBindCallApply</p><ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li><p>strictFunctionTypes</p><ul><li>严格检查函数的类型</li></ul></li><li><p>strictNullChecks</p><ul><li>严格的空值检查</li></ul></li><li><p>strictPropertyInitialization</p><ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p><strong>额外检查</strong></p><ul><li>noFallthroughCasesInSwitch<ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p><strong>高级</strong></p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ol></li></ul></li></ul></li></ol></li></ul></li></ol><h2 id="三、使用webpack打包ts代码"><a href="#三、使用webpack打包ts代码" class="headerlink" title="三、使用webpack打包ts代码"></a>三、使用webpack打包ts代码</h2><h4 id="webpack整合"><a href="#webpack整合" class="headerlink" title="webpack整合"></a>webpack整合</h4><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><ol><li><h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><p>进入项目根目录，执行命令 <code> npm init -y</code>，创建package.json文件</p></li><li><h5 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h5><p>命令如下：</p><p><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code></p><p>共安装了7个包:</p><ul><li><p>webpack：构建工具webpack</p></li><li><p>webpack-cli：webpack的命令行工具</p></li><li><p>webpack-dev-server：webpack的开发服务器</p></li><li><p>typescript：ts编译器</p></li><li><p>ts-loader：ts加载器，用于在webpack中编译ts文件</p></li><li><p>html-webpack-plugin：webpack中html插件，用来自动创建html文件</p></li><li><p>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</p></li></ul></li><li><h5 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h5><p>根目录下创建webpack的配置文件<code>webpack.config.js</code>：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">const HtmlWebpackPlugin = require(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line">const <span class="punctuation">&#123;</span> CleanWebpackPlugin <span class="punctuation">&#125;</span> = require(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">   optimization<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       minimize<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 指定入口文件 </span></span><br><span class="line">   entry<span class="punctuation">:</span> <span class="string">&quot;./src/index.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   devtool<span class="punctuation">:</span> <span class="string">&quot;inline-source-map&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   devServer<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       contentBase<span class="punctuation">:</span> &#x27;./dist&#x27;</span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 指定打包文件所在目录 </span></span><br><span class="line">   output<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">       path<span class="punctuation">:</span> path.resolve(__dirname<span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">       <span class="comment">// 打包文件的文件</span></span><br><span class="line">       filename<span class="punctuation">:</span> <span class="string">&quot;bundle.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">       environment<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           arrowFunction<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   resolve<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       extensions<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 指定webpack打包时要使用的模块 </span></span><br><span class="line">   module<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="comment">// 指定要加载的规则</span></span><br><span class="line">       rules<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">               test<span class="punctuation">:</span> /\.ts$/<span class="punctuation">,</span></span><br><span class="line">               <span class="comment">// 要使用的loader</span></span><br><span class="line">               use<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                   loader<span class="punctuation">:</span> <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="comment">// 要排除的文件</span></span><br><span class="line">               exclude<span class="punctuation">:</span> /node_modules/</span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 配置webpack插件 </span></span><br><span class="line">   plugins<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       new CleanWebpackPlugin()<span class="punctuation">,</span></span><br><span class="line">       new HtmlWebpackPlugin(<span class="punctuation">&#123;</span></span><br><span class="line">           title<span class="punctuation">:</span>&#x27;TS测试&#x27;</span><br><span class="line">       <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="配置TS编译选项"><a href="#配置TS编译选项" class="headerlink" title="配置TS编译选项"></a>配置TS编译选项</h5><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="修改package-json选项"><a href="#修改package-json选项" class="headerlink" title="修改package.json选项"></a>修改package.json选项</h5><p>修改package.json添加如下配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h5><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译；</p><p>或者执行<code>npm start</code>来启动开发服务器；</p></li></ol><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><blockquote><p>虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><ol><li><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></p><p>共安装了4个包，分别是：</p><ul><li><p>@babel&#x2F;core：babel的核心工具</p></li><li><p>@babel&#x2F;preset-env：babel的预定义环境</p></li><li><p>@babel-loader：babel在webpack中的加载器</p></li><li><p>core-js：core-js用来使老版本的浏览器支持新版ES语法</p></li></ul></li><li><h5 id="修改webpack-config-json配置文件"><a href="#修改webpack-config-json配置文件" class="headerlink" title="修改webpack.config.json配置文件"></a>修改webpack.config.json配置文件</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">module<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    rules<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            test<span class="punctuation">:</span> /\.ts$/<span class="punctuation">,</span></span><br><span class="line">            use<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    loader<span class="punctuation">:</span> <span class="string">&quot;babel-loader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    options<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        presets<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">[</span></span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                                        <span class="attr">&quot;chrome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;58&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                        <span class="attr">&quot;ie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;corejs&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;useBuiltIns&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">]</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    loader<span class="punctuation">:</span> <span class="string">&quot;ts-loader&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            exclude<span class="punctuation">:</span> /node_modules/</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被babel处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的targets中指定要兼容的浏览器版本；</p></li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h2 id="四、面向对象"><a href="#四、面向对象" class="headerlink" title="四、面向对象"></a>四、面向对象</h2><p>对方对象，操作对象，首先要拥有对象；</p><p>要创建对象，必须先定义类，所谓的类可以理解为对象的模型；</p><p>程序中可以根据类创建指定类型的对象；</p><p>举例来说：</p><p>可以通过Person类来创建人的对象，通过Dog类来创建狗的对象，不同的类可以用来创建不同的对象；</p><ol><li><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">    属性名: 类型;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    方法名()&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用类别：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li><li><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>可以使用<code>constructor</code>定义一个构造器方法；</p><blockquote><p><strong>注1：在TS中只有一个构造器方法！</strong></p></blockquote><p>例如：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor 被称为构造函数</span></span><br><span class="line">    <span class="comment">// 构造函数会在对象创建时调用</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时也可以直接将属性定义在构造函数中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两种定义方法是两个的！</p><p><strong>注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p><p>例如：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">num</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span>, <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(num);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在X类中不调用<code>super</code>将会报错！</p></li><li><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对象本质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是封装的</p><p>默认情况下，对象的属性是可以任意的修改的，为了保证数据的安全性，在TS中可以对属性的权限进行设置</p><ul><li>静态属性（static）：<ul><li>声明为静态的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个只读，则属性便设为串口属性无法修改</li></ul></li><li>TS中属性具有透明修饰符：<ul><li>public（修改默认值），可以在类、子类和对象中</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><p>示例：</p><p>public：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure><p>protected：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><p>private：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li><h3 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h3><p>对于一些不希望被任意修改的属性，可以将其设置为private</p><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="comment">// 实际通过调用getter方法读取name属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 实际通过调用setter方法修改name属性 </span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>; </span><br></pre></td></tr></table></figure></li><li><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p><p>静态属性（方法）使用static开头</p><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tools</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params"><span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li><li><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>在类中，使用this表示当前对象</p></li><li><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><p><strong>在子类中可以使用super来完成对父类的引用</strong></p></li><li><h3 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h3><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p></li><li><h3 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h3><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="attr">per</span>: <span class="title class_">Person</span></span>)&#123;</span><br><span class="line">    per.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure><p>示例（实现）：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h3><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"><span class="attr">arg</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：</p><p>首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><ol><li><h5 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h5><ol><li><p><strong>创建泛型函数</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>&lt;T&gt;</code>就是泛型；</p><p>T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p></li><li><p><strong>使用泛型函数</strong></p><p><strong>方式一（直接使用）：</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><p><strong>方式二（指定类型）：</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>也可以在函数后手动指定泛型；</p></li><li><p><strong>函数中声明多个泛型</strong></p><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K&#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p></li></ol></li><li><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><p>类中同样可以使用泛型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">prop</span>: T</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h5><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；</p></li></ol></li></ol><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240812 03:38&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、基本类型&quot;&gt;&lt;a href=&quot;#一、基本类型&quot; class=&quot;headerlink&quot; title=&quot;一、基本类型&quot;&gt;&lt;/a&gt;一、基本类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类型声明</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>ECharts</title>
    <link href="http://cychenhaibin.github.io/2024/08/09/ECharts/"/>
    <id>http://cychenhaibin.github.io/2024/08/09/ECharts/</id>
    <published>2024-08-08T16:10:47.000Z</published>
    <updated>2024-08-08T16:11:08.338Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240809 00:10</p><hr><h2 id="一、ECharts的介绍"><a href="#一、ECharts的介绍" class="headerlink" title="一、ECharts的介绍"></a>一、ECharts的介绍</h2><p>ECharts是一个使用JavaScript实现的开源可视化库，兼容性强，底层依赖矢量图形库ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><p><a href="https://echarts.apache.org/zh/option.html#title">https://echarts.apache.org/zh/option.html#title</a></p><h2 id="二、ECharts的基本使用"><a href="#二、ECharts的基本使用" class="headerlink" title="二、ECharts的基本使用"></a>二、ECharts的基本使用</h2><ol><li><h4 id="ECharts快速上手"><a href="#ECharts快速上手" class="headerlink" title="ECharts快速上手"></a>ECharts快速上手</h4><ul><li><p>引入echarts.js文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备一个呈现图表的盒子</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#x27;width: 600px; height: 400px&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化echarts实例对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数，dom元素，决定图表最终呈现的位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> myCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备配置项</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数，dom元素，决定图表最终呈现的位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> myCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;语文&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将配置项设置给echarts实例对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数，dom元素，决定图表最终呈现的位置</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> myCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;语文&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    myCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="相关配置项"><a href="#相关配置项" class="headerlink" title="相关配置项"></a>相关配置项</h4><ul><li><p><code>xAxis</code>：直角坐标系 中的 x 轴</p><ul><li><code>type:&#39;category&#39;</code>：类目轴</li></ul></li><li><p><code>yAxis</code>：直角坐标系 中的 y 轴</p><ul><li><code>type:&#39;value&#39;</code>：数值轴</li></ul></li><li><p><code>series</code>：系列列表，每个系列通过 type 决定自己的图标类型</p><ul><li><code>type:&#39;pic&#39;</code>：图标类型</li></ul><p><strong>其他见官方文档</strong></p></li></ul></li></ol><h2 id="三、EChasrts常见图表"><a href="#三、EChasrts常见图表" class="headerlink" title="三、EChasrts常见图表"></a>三、EChasrts常见图表</h2><ul><li>7大图表：柱状图、折线图、散点图、饼图、地图、雷达图、仪表盘图</li></ul><ol><li><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><ul><li><h5 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h5><ul><li><p>标记：最大值、最小值、平均值</p><p><code>markPoint</code></p><p><code>markLine</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">markPoint</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">markLine</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>显示：数值显示，柱宽度，横向柱状图</p><p><code>label</code></p><p><code>barWidth</code></p><p><code>xAxis</code> 和 <code>yAxis</code> 交换</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">markPoint</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">markLine</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;average&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平均值&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">barWidth</span>: <span class="string">&#x27;30%&#x27;</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h5><p>任何图表都能使用的配置</p><ul><li><p>标题：title</p><ul><li><p>文字样式：<code>textStyle</code></p></li><li><p>标题边框：<code>borderWidth</code>、<code>borderColor</code>、<code>borderRadius</code></p></li><li><p>标题位置：<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code></p></li></ul></li><li><p>提示：tooltip</p><ul><li><p>触发类型：<code>trigger</code></p><p><code>item</code>、<code>axis</code></p></li><li><p>触发时机：<code>triggerOn</code></p><p><code>mouseover</code>、<code>click</code></p></li><li><p>格式化：<code>formatter</code></p></li></ul></li><li><p>工具按钮：toolbox</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">toolbox</span>: &#123;</span><br><span class="line">    <span class="attr">feaature</span>: &#123;</span><br><span class="line">        <span class="attr">saveAsImage</span>: &#123;&#125;,  <span class="comment">// 导出图片</span></span><br><span class="line">        <span class="attr">dataView</span>: &#123;&#125;,     <span class="comment">// 数据视图</span></span><br><span class="line">        <span class="attr">restore</span>: &#123;&#125;,      <span class="comment">// 重置</span></span><br><span class="line">        <span class="attr">dataZoom</span>: &#123;&#125;,     <span class="comment">// 区域缩放</span></span><br><span class="line">        <span class="attr">magicType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: [<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;line&#x27;</span>]</span><br><span class="line">        &#125;                 <span class="comment">// 动态图标类型切换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图例：legend</p><p>需要和 series 配合使用</p><ul><li><p>legend 中的data是一个数组</p></li><li><p>legend 中的data的值需要和series数组中某组数据的name值一致</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">92</span>, <span class="number">87</span>]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><h4 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h4><ul><li><p>常见效果</p><ul><li><p>标记：最大值、最小值、平均值、标注区间</p><p>前三个和柱状图一样</p><p>标注区间：<code>markArea</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">markArea</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [</span><br><span class="line">        [   <span class="comment">// 第一个区间</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">xAxis</span>: <span class="string">&#x27;1月&#x27;</span>    <span class="comment">// 开始</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">xAxis</span>: <span class="string">&#x27;2月&#x27;</span>    <span class="comment">// 结束</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        [   <span class="comment">// 第二个区间</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">xAxis</span>: <span class="string">&#x27;7月&#x27;</span>    <span class="comment">// 开始</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">xAxis</span>: <span class="string">&#x27;8月&#x27;</span>    <span class="comment">// 结束</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线条控制：平滑，风格</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">lineStyle</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>，</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;dashed&#x27;</span>  <span class="comment">// 虚线 dotted:点状线、solid:实线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>填充风格</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">areaStyle</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>紧挨边缘</p><p><code>boundaryGap:false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [],</span><br><span class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缩放：脱离0值比例</p><p><code>scale:true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    <span class="attr">scale</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>堆叠图</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [],</span><br><span class="line">        <span class="attr">stack</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="attr">areaStyle</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [],</span><br><span class="line">        <span class="attr">stack</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="attr">areaStyle</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p>x轴和y轴数据：二维数组</p><ul><li><p>常见效果</p><ul><li><p>气泡图效果</p><p><code>symbolSize</code>、<code>itemStyle</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [],</span><br><span class="line">        <span class="comment">// symbolSize: 10</span></span><br><span class="line">        <span class="attr">symbolSize</span>: <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> height = arg[<span class="number">0</span>] / <span class="number">100</span></span><br><span class="line">            <span class="keyword">const</span> weight = arg[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">const</span> bmi = weight / (height * height)</span><br><span class="line">            <span class="keyword">if</span>(bmi &gt; <span class="number">28</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        itemStyle: &#123;</span></span><br><span class="line"><span class="comment">            color: &#x27;green&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">itemStyle</span>: <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> height = arg[<span class="number">0</span>] / <span class="number">100</span></span><br><span class="line">            <span class="keyword">const</span> weight = arg[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">const</span> bmi = weight / (height * height)</span><br><span class="line">            <span class="keyword">if</span>(bmi &gt; <span class="number">28</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;green&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>涟漪动画效果</p><p><code>type:&#39;effectScatter&#39;</code></p><p><code>showEffectOn:&#39;emphasis</code>：当鼠标移入时才显示效果</p></li></ul></li></ul></li><li><h4 id="直角坐标系的常用配置"><a href="#直角坐标系的常用配置" class="headerlink" title="直角坐标系的常用配置"></a>直角坐标系的常用配置</h4><ol><li><h6 id="网格-grid"><a href="#网格-grid" class="headerlink" title="网格 grid"></a>网格 grid</h6><p>控制直角坐标系的布局和大小</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">grid</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">borderColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">150</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="坐标轴-axis"><a href="#坐标轴-axis" class="headerlink" title="坐标轴 axis"></a>坐标轴 axis</h6><p>坐标轴分为 x轴 和 y轴</p><p>一个 grid 中最多有两种位置的 x轴 和 y轴</p><ul><li><p>坐标轴类型 type</p><p><code>value</code>：数值轴，自动会从目标数据中读取数据</p><p><code>category</code>：类目轴，该类型必须通过 data 设置类目数据</p></li><li><p>显示位置 position</p><p>xAxis：可取值为 top 或者 bottom</p><p>yAxis：可取值为 left 或者 right</p></li></ul></li><li><h6 id="区域缩放-dataZoom"><a href="#区域缩放-dataZoom" class="headerlink" title="区域缩放 dataZoom"></a>区域缩放 dataZoom</h6><p>对数据范围过滤，x轴 和 y轴 都可以拥有</p><p>dataZoom 是一个数组，意味着可以配置多个区域缩放器</p><ul><li><p>类型 type</p><p><code>slider</code>：滑块</p><p><code>inside</code>：内置，依靠鼠标滚轮或者双指缩放</p></li><li><p>指明产生作用的轴</p><p><code>xAxisIndex</code>：设置缩放组件控制的是哪个 x轴，一般写0</p><p><code>yAxisIndex</code>：设置缩放组件控制的是哪个 y轴，一般写0</p></li><li><p>指明初始状态的缩放</p><p><code>start</code>：数据窗口范围的起始百分比</p><p><code>end</code>：数据窗口范围的结束百分比</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataZoom</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">end</span>: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><p>实现步骤：</p><ul><li><p>ECharts最基本的代码结构：</p><p>引入js文件、DOM容器、初始化对象、设置option</p></li><li><p>数据准备：</p><p><code>&#123;name:&quot;淘宝&quot;, value: 11231&#125;</code></p></li><li><p>图表类型：</p><p>在series下设置 <code>type:pie</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: pieData,</span><br><span class="line">            <span class="attr">label</span>: &#123;                         <span class="comment">// 饼图文字显示</span></span><br><span class="line">                <span class="attr">show</span>: <span class="literal">true</span>,                  <span class="comment">// 显示文字</span></span><br><span class="line">                <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">arg</span>)&#123;    <span class="comment">// 决定文字显示内容</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">                    <span class="keyword">return</span> arg.<span class="property">name</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">radius</span>: <span class="string">&#x27;20%&#x27;</span>,                   <span class="comment">// 饼图的半径：百分比参照的是宽度和高度中较小那部分的一半来设置</span></span><br><span class="line">            <span class="attr">radius</span>: [<span class="string">&#x27;50%&#x27;</span>, <span class="string">&#x27;75%&#x27;</span>],          <span class="comment">// 第0个元素代表的是内圆的半径，第1个元素代表的是外圆的半径</span></span><br><span class="line">    <span class="attr">roseType</span>: <span class="string">&#x27;radius&#x27;</span>,              <span class="comment">// 南丁格尔图：饼图的每一个区域的半径是不同的</span></span><br><span class="line">    <span class="attr">selectedMode</span>: <span class="string">&#x27;single&#x27;</span>,          <span class="comment">// 选中的效果，能够将选中的区域偏离圆点一小段距离single|multiple</span></span><br><span class="line">    <span class="attr">selectedOffset</span>: <span class="number">30</span>,              <span class="comment">// 偏移量</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h4><p>矢量地图的实现步骤</p><ul><li><p>ECharts最基本的代码结构：</p><p>引入js文件，DOM容器，初始化对象，设置option</p></li><li><p>准备中国的矢量地图 json 文件，放在 json&#x2F;map&#x2F; 的目录下：</p><p>china.json</p></li><li><p>使用 Ajax 获取 china.json：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;json/map/china.json&#x27;</span>, <span class="keyword">function</span>(<span class="params">chinaJson</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在回调函数中往echarts全局对象注册地图的 json 数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">echarts.<span class="title function_">registerMap</span>(<span class="string">&#x27;chinaMap&#x27;</span>, chinaJson);</span><br></pre></td></tr></table></figure></li><li><p>在 geo 下设置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span></span><br><span class="line"><span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;json/map/china.json&#x27;</span>, <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ret 是中国各个省份的矢量地图数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ret)</span></span></span><br><span class="line"><span class="language-javascript">        echarts.<span class="title function_">registerMap</span>(<span class="string">&#x27;chinaMap&#x27;</span>, chinaJson);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">geo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>常用配置</p><ul><li><p>缩放拖动：</p><p><code>roam</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">geo</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span><br><span class="line">    <span class="attr">roam</span>: <span class="literal">true</span>,       <span class="comment">// 设置允许缩放以及拖动的效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>名称显示：</p><p><code>label</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">geo</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span><br><span class="line">    <span class="attr">roam</span>: <span class="literal">true</span>,       <span class="comment">// 设置允许缩放以及拖动的效果</span></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,   <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化缩放比例：</p><p><code>zoom</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">geo</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span><br><span class="line">    <span class="attr">roam</span>: <span class="literal">true</span>,       <span class="comment">// 设置允许缩放以及拖动的效果</span></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,   <span class="comment">// 展示标签</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">2</span>,          <span class="comment">// 2倍</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>地图中心点：</p><p><code>center</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">geo</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span><br><span class="line">    <span class="attr">roam</span>: <span class="literal">true</span>,       <span class="comment">// 设置允许缩放以及拖动的效果</span></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,   <span class="comment">// 展示标签</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">2</span>,          <span class="comment">// 2倍</span></span><br><span class="line">    <span class="attr">center</span>: [<span class="number">87.617733</span>, <span class="number">43.792818</span>]     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示某个区域：</p><ol><li>加载该区域的矢量地图数据</li><li>通过 registerMap 注册到 echarts 全局对象中</li><li>指明 geo 配置下的 type 和 map 属性</li><li>通过 zoom 放大该区域</li><li>通过 center 定位中心点</li></ol></li><li><p>不同城市颜色不同：</p><ol><li><p>显示基本的中国地图</p></li><li><p>城市的空气质量数据设置给 series</p></li><li><p>将 series 下的数据和 geo 关联起来</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">geoIndex</span>:<span class="number">0</span></span><br><span class="line"><span class="attr">type</span>:<span class="string">&#x27;map&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>结合 visualMap 配合使用</p><p><code>min</code>、<code>max</code>、<code>inRange</code>、<code>calculable</code></p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> airData = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">value</span>: <span class="number">39</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;json/map/china.json&#x27;</span>, <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ret 是中国各个省份的矢量地图数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ret)</span></span></span><br><span class="line"><span class="language-javascript">        echarts.<span class="title function_">registerMap</span>(<span class="string">&#x27;chinaMap&#x27;</span>, chinaJson);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">geo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,  <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">roam</span>: <span class="literal">true</span>,       <span class="comment">// 设置允许缩放以及拖动的效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: <span class="literal">true</span>,   <span class="comment">// 展示标签</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: airData,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">geoIndex</span>: <span class="number">0</span>,  <span class="comment">// 将空气质量的数据和第0个geo配置关联在一起</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">visualMap</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">min</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">inRange</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: [<span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]   <span class="comment">// 控制颜色渐变的范围</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">calculable</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>地图和散点图结合使用</p><ol><li><p>给 series 下增加新的对象</p></li><li><p>准备好散点数据，设置给新对象的 data</p></li><li><p>配置新对象的type</p><p><code>type:effectScatter</code></p></li><li><p>让散点图使用地图坐标系统</p><p><code>coordinateSystem:&#39;geo&#39;</code></p></li><li><p>让涟漪动画的效果更加明显</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rippleEffect</span>:&#123;</span><br><span class="line">    <span class="attr">scale</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> airData = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">value</span>: <span class="number">39</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;json/map/china.json&#x27;</span>, <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ret 是中国各个省份的矢量地图数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ret)</span></span></span><br><span class="line"><span class="language-javascript">        echarts.<span class="title function_">registerMap</span>(<span class="string">&#x27;chinaMap&#x27;</span>, chinaJson);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">geo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">map</span>: <span class="string">&#x27;chinaMap&#x27;</span>,              <span class="comment">// chinaMap需要和registerMap中的第一个参数保持一致</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">roam</span>: <span class="literal">true</span>,                   <span class="comment">// 设置允许缩放以及拖动的效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: <span class="literal">true</span>,               <span class="comment">// 展示标签</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: airData,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">geoIndex</span>: <span class="number">0</span>,              <span class="comment">// 将空气质量的数据和第0个geo配置关联在一起</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;map&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: scatterData,        <span class="comment">// 配置散点的坐标数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;effectScatter&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">coordinateSystem</span>:<span class="string">&#x27;geo&#x27;</span>,   <span class="comment">// 指明散点使用的坐标系统，geo的坐标系统</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rippleEffect</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">scale</span>: <span class="number">10</span>             <span class="comment">// 设置涟漪动画的缩放比例</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">visualMap</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">min</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">inRange</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: [<span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]   <span class="comment">// 控制颜色渐变的范围</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">calculable</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h4><p>实现步骤：</p><ol><li><p>ECharts最基本的代码结构：</p><p>引入js文件，DOM容器，初始化对象，设置option</p></li><li><p>定义各个维度的最大值，通过 radar 属性设置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">indicator</span>:[&#123;<span class="attr">name</span>: <span class="string">&#x27;易用性&#x27;</span>, <span class="attr">max</span>: <span class="number">100</span>&#125;, ...]</span><br></pre></td></tr></table></figure></li><li><p>准备具体产品的数据，设置给 series 下的 data：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:[&#123;<span class="attr">name</span>:<span class="string">&#x27;华为手机&#x27;</span>, <span class="attr">value</span>:[<span class="number">80</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">82</span>,<span class="number">90</span>]&#125;,...]</span><br></pre></td></tr></table></figure></li><li><p>图标类型：</p><p>在series下设置 <code>type:radar</code></p></li></ol><ul><li><p>常用配置</p><ul><li><p>显示数值</p><p><code>label</code></p></li><li><p>区域面积</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">areaStyle</span>: &#123;&#125;,</span><br></pre></td></tr></table></figure></li><li><p>绘制类型</p><p><code>shape</code></p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> dataMax = [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;易用性&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;功能&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;拍照&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">radar</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">indicator</span>: dataMax,               <span class="comment">// 配置各个维度的最大值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>,                  <span class="comment">// 配置雷达图最外层的图形展示</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:radar,                   <span class="comment">// 雷达图</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">label</span>: &#123;                      <span class="comment">// 设置标签的样式</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">show</span>: <span class="literal">true</span>                <span class="comment">// 显示数值</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">areaStyle</span>: &#123;&#125;,                <span class="comment">// 将每一个产品的雷达图形成阴影的面积</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;华为手机&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">value</span>:[<span class="number">80</span>,<span class="number">90</span>,<span class="number">80</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&#x27;oppo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">value</span>:[<span class="number">90</span>,<span class="number">80</span>,<span class="number">92</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h4><p>主要作用在进度把控以及数据范围的监测</p><p>实现步骤</p><ol><li><p>ECharts最基本的代码结构</p><p>引入js文件，DOM容器，初始化对象，设置option</p></li><li><p>准备数据，设置给 series 下的data</p><p><code>data:[&#123;value: 97&#125;]</code></p></li><li><p>图标类型：</p><p>在series下设置 <code>type:gauge</code></p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:gauge,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">value</span>: <span class="number">97</span></span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="comment">// 每一个对象代表一个指针</span></span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>常见配置</p><ul><li><p>数值范围：</p><p><code>max</code>、<code>min</code></p></li><li><p>多个指针：</p><p>增加 data 中的数组元素</p></li><li><p>多个指针颜色差异：</p><p><code>itemStyle</code></p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mCharts = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:gauge,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">value</span>: <span class="number">97</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">itemStyle</span>: &#123;         <span class="comment">// 指针样式</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span>    <span class="comment">// 指针颜色</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,                       <span class="comment">// 每一个对象代表一个指针</span></span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">value</span>: <span class="number">85</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">itemStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">min</span>: <span class="number">50</span>,                     <span class="comment">// min max 控制仪表盘数值范围</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    mCharts.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240809 00:10&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、ECharts的介绍&quot;&gt;&lt;a href=&quot;#一、ECharts的介绍&quot; class=&quot;headerlink&quot; title=&quot;一、ECharts的介绍&quot;&gt;&lt;/a&gt;一、ECharts</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://cychenhaibin.github.io/2024/07/23/ES6/"/>
    <id>http://cychenhaibin.github.io/2024/07/23/ES6/</id>
    <published>2024-07-22T17:56:47.000Z</published>
    <updated>2024-07-22T17:56:46.793Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240723 01:56</p><h2 id="一、ES6语法"><a href="#一、ES6语法" class="headerlink" title="一、ES6语法"></a>一、ES6语法</h2><ol><li><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><ol><li><p>let：声明变量</p><ol><li>let声明的变量只能在代码块内有效</li><li>不可以重复声明同一个变量</li><li>不存在变量提升</li></ol><p><strong>【面试题】let 和 var 的区别</strong></p><ol><li>var声明变量可能不具有作用域，let声明变量有作用域</li><li>var可以声明同一个变量（覆盖），let不可以</li><li>var有变量提升，let没有</li></ol></li><li><p>const：常量</p><ol><li>const声明的变量只能在代码块内有效</li><li>不可以重复声明同一个变量</li><li>不存在变量提升</li></ol><p><strong>【面试题】let 和 var 的区别</strong></p><ol><li>var声明变量可能不具有作用域，const声明变量有作用域</li><li>var可以声明同一个变量（覆盖），const不可以</li><li>var有变量提升，const没有</li></ol></li></ol></li><li><h4 id="数组和对象解构赋值"><a href="#数组和对象解构赋值" class="headerlink" title="数组和对象解构赋值"></a>数组和对象解构赋值</h4><ol><li><h6 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> [num1,num2,num3] = [<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> [str1,str2,str3=<span class="number">100</span>] = [<span class="number">20</span>,<span class="number">30</span>];</span><br></pre></td></tr></table></figure><p>如果没有匹配则是underfined，右侧的优先级比默认值大</p></li><li><h6 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">123</span>,<span class="attr">b</span>:<span class="number">456</span>&#125;</span><br></pre></td></tr></table></figure><p>key要和变量名一样</p></li></ol></li><li><h4 id="字符串和函数参数解构赋值"><a href="#字符串和函数参数解构赋值" class="headerlink" title="字符串和函数参数解构赋值"></a>字符串和函数参数解构赋值</h4><ol><li><p>字符串的解构赋值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// h e l</span></span><br></pre></td></tr></table></figure></li><li><p>函数参数的解构赋值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">[a,b]</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>([<span class="number">10</span>,<span class="number">20</span>]);</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h4><ol><li><p><code>include()</code>：和<code>indexOf</code>区别不大</p><p><code>includes()</code> 返回值是布尔类型 true|false</p><p><code>indexOf()</code> -1 || 下标</p></li><li><p><code>startsWith()</code>：</p><p>返回布尔值</p><p>表示参数字符串是否在原字符串的头部</p></li><li><p><code>endsWith()</code>:</p><p>返回布尔值</p><p>表示参数字符串是否在原字符串的尾部</p></li><li><p><code>repeat</code></p><p>重复几次：<code>str.repeat(3)</code></p></li><li><p><code>padStart()</code>、<code>padEnd()</code></p><p>补全：<code>str.padStart(2,&#39;0&#39;)</code>：返回的字符串一共两位，不够在前面补0</p></li><li><p><code>trimStart()</code>、<code>trimEnd()</code></p><p><code>trim()</code>：去除前后空格</p><p><code>trimStart()</code>：去除前空格</p><p><code>trimEnd()</code>：去除后空格</p></li><li><p><code>replaceAll()</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/a/g</span>,<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;?&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">[num1,num2]</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是一个参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = v=&gt;&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加{}，默认有return</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = v=&gt;v;</span><br></pre></td></tr></table></figure><p><strong>箭头函数和普通函数的区别</strong>：</p><ol><li><p>箭头函数不能new</p></li><li><p>箭头函数内部没有arguments对象</p></li><li><p>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象，一般来说，箭头函数的this都基本指向于window对象</p></li></ol></li><li><h4 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h4><ol><li><h6 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">参数=&#123;&#125;</span>)=&gt;&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fun = <span class="keyword">function</span>(<span class="params">参数=&#123;&#125;</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>…操作符</p><p>如果不是一个组合，可以合并</p><p>如果是一个组合，可以拆分</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并数组、</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,];</span><br><span class="line">arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">[...arr1,...arr2]</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h4><ol><li><p><code>Array.from()</code></p><p>用于将两类对象转为真正的数组</p></li><li><p><code>Array.of()</code></p><p>用于将一组值，转换为数组</p></li><li><p><code>find()</code> 和 <code>findIndex()</code></p><p><code>find()</code> 查找（找到第一个），找到返回该成员，没有找到返回underfined</p><p><code>findIndex()</code> 查找（找到第一个），找到返回该下标，没有找到返回-1</p></li><li><p><code>includes()</code> 类似于indexOf</p><p>找到返回true，没有找到返回false</p></li><li><p><code>flat()</code>：扁平化数组</p></li></ol></li><li><h4 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h4><ol><li><h6 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    str   <span class="comment">// str:str</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="for…of语法可以遍历对象-数组"><a href="#for…of语法可以遍历对象-数组" class="headerlink" title="for…of语法可以遍历对象|数组"></a>for…of语法可以遍历对象|数组</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(obj))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,val] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(onj))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key,val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h4><ol><li><p><code>Object.is()</code>：判断是否相等</p><p>主要是解决ES5之前的：&#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;的问题</p></li><li><p><code>Object.assign()</code><strong>【重要】</strong></p><p>合并对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1,obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1,obj2);   <span class="comment">// 将obj2的值赋值给obj1</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><strong><code>Object.assign()</code> 是浅拷贝，不是深拷贝</strong></li></ul></li></ol></li><li><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><ol><li><p>class基本格式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = options.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;run&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;run&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="title function_">run</span>(), obj.<span class="title function_">foo</span>())</span><br></pre></td></tr></table></figure></li><li><p>类继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.属性名 = 值</span><br><span class="line">    &#125;</span><br><span class="line">    方法<span class="number">1</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    方法<span class="number">2</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="Symbol和Set"><a href="#Symbol和Set" class="headerlink" title="Symbol和Set"></a>Symbol和Set</h4><ol><li><p>symbol是一个独一无二的</p></li><li><p>symbol是新的原始数据类型</p></li><li><p><code>new Set()</code>：</p><p>没有重复的值，去重</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br></pre></td></tr></table></figure><p><strong>【面试题】：有几种去重方式</strong></p><ol><li>ES6的<code>new Set()</code></li><li><code>filter</code></li><li>判断逻辑的形式</li></ol></li></ol></li><li><h4 id="Module的语法"><a href="#Module的语法" class="headerlink" title="Module的语法"></a>Module的语法</h4><ol><li><h4 id="引入：import"><a href="#引入：import" class="headerlink" title="引入：import"></a>引入：import</h4><p>默认会找 .js、.json</p><ol><li><p>引入文件全部内容</p><p><code>import &#39;./script&#39;</code></p></li><li><p>按需引入</p><p><code>import &#123;a, b, c, fun&#125; from &#39;./a&#39;</code></p></li><li><p>自定义名称引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抛出</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a,b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="抛出：export"><a href="#抛出：export" class="headerlink" title="抛出：export"></a>抛出：export</h4><ol><li><p><code>export let a = 10</code></p></li><li><p><code>let fun = ()=&#123;&#125;</code></p><p><code>export &#123;fun&#125;</code></p></li><li><p><code>let a = 10;</code></p><p><code>let b = 20;</code></p><p><code>export &#123;a, b&#125;</code></p></li></ol></li></ol></li><li><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Promise是异步编程的解决方案</p><ul><li>功能：写异步的代码，同步的执行出来</li><li>好处：让代码更好的维护或者易读</li></ul><p>同步：只有前一个任务执行完毕后，才能执行下一个任务</p><p>异步：不进入主线程，进入任务队列，只有任务队列通知主线程，某个异步任务可以执行，该任务才会进入主线程</p><p><strong>【面试题】Promise有哪几种状态？</strong></p><ol><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">res</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">        <span class="title function_">res</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">            <span class="title function_">res</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h4><ol><li><p>async函数返回的是Promise</p></li><li><p>如果单独使用await会报错，await需要在async中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">res</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    console.log(111);</span></span><br><span class="line"><span class="comment">    foo().then(v=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log(v);</span></span><br><span class="line"><span class="comment">        return new Promise((res,rej)=&gt;&#123;</span></span><br><span class="line"><span class="comment">            res();</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;).then(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">        console.log(222);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="keyword">let</span> f = <span class="keyword">await</span> <span class="title function_">foo</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(f);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="fetch和mock"><a href="#fetch和mock" class="headerlink" title="fetch和mock"></a>fetch和mock</h4><ol><li><p>fetch</p><p>window对象下就有fetch    ——-&gt;    返回的是promise对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url,&#123;</span><br><span class="line">    <span class="attr">metch</span>:<span class="string">&#x27;get|post&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;&#125;  <span class="comment">// 给后端传递的参数</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 后端给前端返回的数据</span></span><br><span class="line">    data.<span class="title function_">json</span>()   <span class="comment">// 把数据转换成对象的形式|格式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">async</span> res=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>fetch-mock</p><p>如果目前没有接口，前端自己模拟数据</p><ol><li><p>下载fetch-mock</p><p><code>npm install fetch-mock -S</code></p></li><li><p>引入模块</p><p><code>import fetchMock from &#39;fetch-mock&#39;</code></p></li><li><p>基本格式</p><p><code>fetchMock.mock(url,函数)</code></p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchMock <span class="keyword">from</span> <span class="string">&#x27;fetch-mock&#x27;</span>;</span><br><span class="line">fetchMock.<span class="title function_">mock</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">url,params</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// params前端给后端传递的数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./fetchMock&#x27;</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/list&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">userName</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">userPwd</span>:<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">async</span> res=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="二、ES6项目"><a href="#二、ES6项目" class="headerlink" title="二、ES6项目"></a>二、ES6项目</h2><ol><li><h4 id="领导"><a href="#领导" class="headerlink" title="领导"></a>领导</h4><ol><li>创建仓库</li><li>创建分支</li><li>初始化项目、搭建目录结构</li></ol></li><li><h4 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h4><ol><li><p>克隆代码到本地</p><p>下载仓库中指定分支的代码</p><p><code>git clone -b 分支名称 分支地址</code></p></li><li><p>配置本地的user.name &amp;&amp; user.email</p></li><li><p>本地切换到远程分支</p><p><code>git checkout -b 分支名称</code></p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240723 01:56&lt;/p&gt;
&lt;h2 id=&quot;一、ES6语法&quot;&gt;&lt;a href=&quot;#一、ES6语法&quot; class=&quot;headerlink&quot; title=&quot;一、ES6语法&quot;&gt;&lt;/a&gt;一、ES6语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://cychenhaibin.github.io/2024/07/22/Webpack/"/>
    <id>http://cychenhaibin.github.io/2024/07/22/Webpack/</id>
    <published>2024-07-22T02:30:47.000Z</published>
    <updated>2024-07-22T17:55:30.638Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240722 10:30</p><hr><h2 id="一、webpack"><a href="#一、webpack" class="headerlink" title="一、webpack"></a>一、webpack</h2><p>模块化打包工具</p><h2 id="二、安装webpack"><a href="#二、安装webpack" class="headerlink" title="二、安装webpack"></a>二、安装webpack</h2><ol><li><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p><code>cnpm install webpack -g</code></p><p><code>cnpm install webpack-cli -g</code></p></li><li><h4 id="测试版本"><a href="#测试版本" class="headerlink" title="测试版本"></a>测试版本</h4><p><code>webpack -v</code></p><p><code>webpack-cli -v</code></p></li></ol><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><ol><li><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>默认：src&#x2F;index.js</p></li><li><h4 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h4><p>默认：dist&#x2F;main.js</p></li><li><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><ol><li><p>多文件打包成一个文件</p><p><code>enrty:[&#39;./src/a.js&#39;,&#39;./src/b.js]</code></p></li><li><p>多文件打包成多文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>:&#123;</span><br><span class="line"><span class="attr">a</span>:<span class="string">&#x27;./src/a.js&#x27;</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="string">&#x27;./src/b.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="四、loader"><a href="#四、loader" class="headerlink" title="四、loader"></a>四、loader</h2><ol><li><h4 id="loader是什么"><a href="#loader是什么" class="headerlink" title="loader是什么"></a>loader是什么</h4><p>webpack只能理解Javascript和JSON文件，这是webpack开箱可用的自带能力。loader让webpack能够去处理其他类型的文件，并将他们转换为有效模块，以供应用程序使用，以及被添加到依赖图中</p></li><li><h4 id="loader的配置"><a href="#loader的配置" class="headerlink" title="loader的配置"></a>loader的配置</h4><p>写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[&#123;<span class="attr">test</span>:<span class="regexp">/\.txt$/</span>,<span class="attr">use</span>:<span class="string">&#x27;raw-loader&#x27;</span>&#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、test属性，识别出哪些文件会被转换</p><p>2、use属性，定义出在进行转换时，应该使用哪个loader</p></li></ol><h2 id="五、插件"><a href="#五、插件" class="headerlink" title="五、插件"></a>五、插件</h2><p>html-webpack-plugin </p><ol><li><p>下载</p><p><code>cnpm install html-webpack-plugin -S</code></p></li><li><p>引入</p><p><code>var HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);</code></p></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>参数说明</p><ol><li><p>指定模版页面</p><p><code>template:&#39;./src/index.html&#39;</code></p></li><li><p>修改默认输出文件名</p><p><code>filename:&#39;xx.html&#39;</code></p></li><li><p>允许插入到模板中的一些chunk</p><p><code>chunks:[&#39;jquery&#39;,&#39;xx&#39;]</code></p></li><li><p>配置不允许注入的thunk</p><p><code>excludeChunks:[&#39;xx&#39;]</code></p></li></ol></li><li><p>多页面打包</p><p>需要创建多个new HtmlWebpackPlugin</p></li></ol><h2 id="六、图片加载"><a href="#六、图片加载" class="headerlink" title="六、图片加载"></a>六、图片加载</h2><ol><li><h4 id="加载图片的loader-file-loader"><a href="#加载图片的loader-file-loader" class="headerlink" title="加载图片的loader &#x3D;&#x3D;&gt; file-loader"></a>加载图片的loader &#x3D;&#x3D;&gt; file-loader</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>, </span><br><span class="line"><span class="attr">use</span>: [&#123;</span><br><span class="line"><span class="attr">loader</span>:<span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options</span>:&#123;</span><br><span class="line"><span class="attr">esModule</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">outputPath</span>:<span class="string">&#x27;img/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="让html支持图片的loader-html-withimg-loader"><a href="#让html支持图片的loader-html-withimg-loader" class="headerlink" title="让html支持图片的loader  &#x3D;&#x3D;&gt;  html-withimg-loader"></a>让html支持图片的loader  &#x3D;&#x3D;&gt;  html-withimg-loader</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.html$/</span>, </span><br><span class="line">    <span class="attr">use</span>: <span class="string">&#x27;html-withimg-loader&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="七、添加字体图标"><a href="#七、添加字体图标" class="headerlink" title="七、添加字体图标"></a>七、添加字体图标</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>, </span><br><span class="line">   <span class="attr">use</span>: <span class="string">&#x27;file-loader?name=./fonts/[name].[ext]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、压缩打包CSS"><a href="#八、压缩打包CSS" class="headerlink" title="八、压缩打包CSS"></a>八、压缩打包CSS</h2><ol><li><p>单独抽离css文件</p><ol><li><p>下载插件： mini-css-extract-plugin</p></li><li><p>引入插件：</p><p><code>var MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;);</code></p></li><li><p>修改loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line"><span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>压缩css文件</p><p>插件： optimize-css-assets-webpack-plugin</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240722 10:30&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、webpack&quot;&gt;&lt;a href=&quot;#一、webpack&quot; class=&quot;headerlink&quot; title=&quot;一、webpack&quot;&gt;&lt;/a&gt;一、webpack&lt;/h2&gt;&lt;p&gt;模</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://cychenhaibin.github.io/2024/07/21/Git/"/>
    <id>http://cychenhaibin.github.io/2024/07/21/Git/</id>
    <published>2024-07-21T07:01:47.000Z</published>
    <updated>2024-07-21T07:02:32.205Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240721 15:01</p><hr><h3 id="一、svn和git"><a href="#一、svn和git" class="headerlink" title="一、svn和git"></a>一、svn和git</h3><p>svn：集中式</p><p>git：分布式</p><h3 id="二、git命令"><a href="#二、git命令" class="headerlink" title="二、git命令"></a>二、git命令</h3><ul><li><p><code>git init</code>：初始化仓库</p></li><li><p><code>git config -l</code>：查看配置</p></li><li><p><code>git status</code>：查看状态</p></li><li><p><code>git add 。</code>：添加到暂缓区</p></li><li><p><code>git commit -m &#39;注释内容&#39;</code>：添加到分支中</p></li><li><p><code>git diff 文件名</code>：查看修改文件的内容</p></li><li><p><code>git log</code>：查看修改文件的历史</p></li><li><p><code>git reflog</code>：查看修改文件的历史【简单形式】</p></li><li><p><code>git reset --hard HEAD^</code>：回到上一个版本</p></li><li><p><code>git reset --hard 版本号</code>：回到指定版本</p></li><li><p><code>git clone</code>：克隆代码</p></li><li><p><code>git pull</code>：更新代码</p></li></ul><h3 id="三、分支操作"><a href="#三、分支操作" class="headerlink" title="三、分支操作"></a>三、分支操作</h3><ul><li><p><code>git branch</code>：查看本地分支</p></li><li><p><code>git branch 分支名称</code>：新建分支</p></li><li><p><code>git checkout 分支名称</code>：切换分支</p></li><li><p><code>git branch -r</code>：查看远程仓库分支</p></li><li><p><code>git push --set-upstream origin 分支名称</code>：本地分支提交到远程仓库</p></li><li><p><code>git branch -d 分支名称</code>：删除本地分支</p></li><li><p><code>git push origin --delete 分支名</code>：删除远程仓库的分支名</p></li></ul><h3 id="四、合并分支"><a href="#四、合并分支" class="headerlink" title="四、合并分支"></a>四、合并分支</h3><ol><li>分支是独立的，不会相互影响<ul><li>在一个分支下创建另外一个新的分支，新的分支就会继承旧分支之前的操作</li></ul></li><li>合并分支<ul><li><code>git merge 分支名称</code></li><li>如果当前是在master分支下写入：<code>git merge dev</code>，那么master和dev会进行合并，相当于master + dev</li></ul></li></ol><h3 id="五、Gitflow工作流"><a href="#五、Gitflow工作流" class="headerlink" title="五、Gitflow工作流"></a>五、Gitflow工作流</h3><table><thead><tr><th align="center">分支名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">master</td><td align="center">用于保存上线版本代码，创建了dev分支</td></tr><tr><td align="center">develop</td><td align="center">用于保存相对稳定版本的代码，所有的feature都是dev分支创建的</td></tr><tr><td align="center">feature</td><td align="center">用于开发某几个功能，不同的功能可能会创建不同的分支</td></tr><tr><td align="center">release</td><td align="center">用于代码上线前的准备（测试、bug修复），是dev创建的</td></tr><tr><td align="center">bugfix</td><td align="center">用于修复不紧急bug</td></tr><tr><td align="center">hotfix</td><td align="center">用于修复紧急bug</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240721 15:01&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、svn和git&quot;&gt;&lt;a href=&quot;#一、svn和git&quot; class=&quot;headerlink&quot; title=&quot;一、svn和git&quot;&gt;&lt;/a&gt;一、svn和git&lt;/h3&gt;&lt;p&gt;s</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs操作数据库报错</title>
    <link href="http://cychenhaibin.github.io/2024/07/19/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/"/>
    <id>http://cychenhaibin.github.io/2024/07/19/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/</id>
    <published>2024-07-19T05:48:47.000Z</published>
    <updated>2024-07-19T07:27:05.198Z</updated>
    
    <content type="html"><![CDATA[<p>解决nodeJs操作数据库报错<code>ER_NOT_SUPPORTED_AUTH_MODE</code>，并且提示<code>Client does not support authentication protocol requested by server; consider upgrading MySQL client</code>：客户端不支持服务器请求的身份验证协议；考虑升级MySQL客户端；</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><p>最新的MySQL模块并未完全支持MySQL 8.0的<code>caching_sha2_password</code>加密方式，而MySQL 8.0中默认仍然是<code>caching_sha2_password</code>加密方式，因此用户认证不通过了。</p><p><img src="/../image/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/image-20240719134649437.png" alt="image-20240719134649437"></p><p>如下查询：</p><p><img src="/../image/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/image-20240719134605279.png" alt="image-20240719134605279"></p><p>这里的“123456”是你自己的密码</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>直接数据库工具里面修改加密方式mysql_native_password：</p><p><img src="/../image/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/image-20240719134726725.png" alt="image-20240719134726725"></p><p>或者通过指令方式修改：</p><p><img src="/../image/nodeJs%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/image-20240719134754341.png" alt="image-20240719134754341"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解决nodeJs操作数据库报错&lt;code&gt;ER_NOT_SUPPORTED_AUTH_MODE&lt;/code&gt;，并且提示&lt;code&gt;Client does not support authentication protocol requested by server; con</summary>
      
    
    
    
    <category term="Error" scheme="http://cychenhaibin.github.io/categories/Error/"/>
    
    
    <category term="Error" scheme="http://cychenhaibin.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs</title>
    <link href="http://cychenhaibin.github.io/2024/07/19/nodeJs/"/>
    <id>http://cychenhaibin.github.io/2024/07/19/nodeJs/</id>
    <published>2024-07-18T18:52:47.000Z</published>
    <updated>2024-07-18T18:52:40.535Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240719 2:52</p><hr><h2 id="一、开发环境搭建"><a href="#一、开发环境搭建" class="headerlink" title="一、开发环境搭建"></a>一、开发环境搭建</h2><ol><li><h4 id="commonJs-模块化"><a href="#commonJs-模块化" class="headerlink" title="commonJs(模块化)"></a>commonJs(模块化)</h4><p>规范定义：</p><ol><li>每一个文件都是一个模块，都有自己的作用域</li><li>在模块内部，module变量代表自身</li><li><code>module.exports</code>提供对外接口</li></ol><p><code>require</code>语法：</p><ol><li>&#x2F; 代表绝对路径，.&#x2F; 代表相对路径</li><li>默认后缀：js json node</li><li><code>require(&#39;http&#39;)</code> —— node_modules</li></ol></li><li><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><p><code>global.test = 111;</code></p></li></ol><h2 id="二、npm"><a href="#二、npm" class="headerlink" title="二、npm"></a>二、npm</h2><ol><li><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><ol><li><code>cnpm install 包名 -g</code>：全局</li><li><code>cnpm install 包名 -S</code>：局部，生产环境</li><li><code>cnpm install 包名 -D</code>：局部，开发环境</li></ol></li><li><h4 id="上传自己的包"><a href="#上传自己的包" class="headerlink" title="上传自己的包"></a>上传自己的包</h4><ol><li><p>npm官网注册一个账号</p><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p></li><li><p>初始化项目</p><p><code>npm init</code>|<code>cnpm init</code></p></li><li><p>npm登录</p><p><code>npm login</code></p><p>输入：userName + 邮箱 + 密码</p></li><li><p>上传npm包</p><p><code>npm publish</code></p></li></ol></li><li><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><p>package.json：项目的描述文件</p></li></ol><h2 id="三、http服务器"><a href="#三、http服务器" class="headerlink" title="三、http服务器"></a>三、http服务器</h2><ol><li><h4 id="get请求url数据操作"><a href="#get请求url数据操作" class="headerlink" title="get请求url数据操作"></a>get请求url数据操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reqUrl = req.<span class="property">url</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(reqUrl,<span class="literal">true</span>).<span class="property">query</span>.<span class="property">title</span>)</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/content.html?id=2&amp;title=这是文章标题&quot;</span>&gt;</span>进入详情页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="get请求表单数据操作"><a href="#get请求表单数据操作" class="headerlink" title="get请求表单数据操作"></a>get请求表单数据操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=utf8&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> reqUrl = req.<span class="property">url</span>;</span><br><span class="line"><span class="keyword">const</span> formVal = url.<span class="title function_">parse</span>(reqUrl,<span class="literal">true</span>).<span class="property">query</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formVal.<span class="property">userName</span>,formVal.<span class="property">userPwd</span>);</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&quot;用户名:&quot;</span>+formVal.<span class="property">userName</span>+<span class="string">&quot;-----&gt;&quot;</span>+<span class="string">&quot;密码:&quot;</span>+formVal.<span class="property">userPwd</span>);</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&#x27;http://localhost:8080&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="post请求表单数据操作"><a href="#post请求表单数据操作" class="headerlink" title="post请求表单数据操作"></a>post请求表单数据操作</h4><p>post —— 事件接收</p><p><code>req.on(&#39;data&#39;)</code> : 每次发送的数据<br><code>req.on(&#39;end&#39;)</code>  : 数据发送完成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> postVal = <span class="string">&quot;&quot;</span>;</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">postVal+=chunk;</span><br><span class="line">&#125;)</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(  querystring.<span class="title function_">parse</span>(postVal) )</span><br><span class="line">res.<span class="title function_">end</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="四、Mysql"><a href="#四、Mysql" class="headerlink" title="四、Mysql"></a>四、Mysql</h2><ol><li><h4 id="node连接mysql"><a href="#node连接mysql" class="headerlink" title="node连接mysql"></a>node连接mysql</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="title function_">ewquire</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&quot;数据库名字&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from user&#x27;</span>,<span class="function">(<span class="params">err,result,fields</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p><img src="/../image/nodeJs/image-20240718191707213.png" alt="image-20240718191707213"></p><p><strong>案例：登录</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&#x27;http://localhost:8080&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> postVal = <span class="string">&quot;&quot;</span>;</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">postVal+=chunk;</span><br><span class="line">&#125;)</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> formVal = querystring.<span class="title function_">parse</span>(postVal);</span><br><span class="line"><span class="keyword">let</span> userName = formVal.<span class="property">userName</span>;</span><br><span class="line"><span class="keyword">let</span> userPwd = formVal.<span class="property">userPwd</span>;</span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line"><span class="attr">host</span>:<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line"><span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line"><span class="attr">password</span>:<span class="string">&quot;root123&quot;</span>,</span><br><span class="line"><span class="attr">database</span>:<span class="string">&quot;demo1&quot;</span>,</span><br><span class="line"><span class="attr">port</span>:<span class="number">3306</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数据库信息</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&quot;select * from user where userName=? and userPwd=?&quot;</span>,[userName,userPwd],<span class="function">(<span class="params">err,results,fields</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="keyword">if</span>(results.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&quot;text/html;charset=utf8&quot;</span>&#125;)</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">res.<span class="title function_">end</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">end</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p><strong>案例：注册</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&#x27;http://localhost:8080&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(req.<span class="property">url</span>!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> postVal = <span class="string">&quot;&quot;</span>;</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">postVal+=chunk;</span><br><span class="line">&#125;)</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> formVal = querystring.<span class="title function_">parse</span>(postVal);</span><br><span class="line"><span class="keyword">let</span> userName = formVal.<span class="property">userName</span>;</span><br><span class="line"><span class="keyword">let</span> userPwd = formVal.<span class="property">userPwd</span>;</span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line"><span class="attr">host</span>:<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line"><span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>:<span class="string">&quot;root123&quot;</span>,</span><br><span class="line"><span class="attr">database</span>:<span class="string">&quot;demo1&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into user value (?,?,?)&#x27;</span>,[<span class="number">0</span>,userName,userPwd],<span class="function">(<span class="params">err,results,fields</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&quot;注册成功！！！&quot;</span>);</span><br><span class="line">res.<span class="title function_">end</span>();</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">end</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、Express"><a href="#五、Express" class="headerlink" title="五、Express"></a>五、Express</h2><ol><li><h4 id="express目录结构"><a href="#express目录结构" class="headerlink" title="express目录结构"></a>express目录结构</h4><p>express是基于node.js的web应用开发框架</p><p><img src="/../image/nodeJs/image-20240719005843352.png" alt="image-20240719005843352"></p><p><img src="/../image/nodeJs/image-20240719011858922.png" alt="image-20240719011858922"></p></li><li><h4 id="express路由关系"><a href="#express路由关系" class="headerlink" title="express路由关系"></a>express路由关系</h4><p><img src="/../image/nodeJs/image-20240719020331183.png" alt="image-20240719020331183"></p><p><img src="/../image/nodeJs/image-20240719020352209.png" alt="image-20240719020352209"></p></li><li><h4 id="引入资源和模块语法"><a href="#引入资源和模块语法" class="headerlink" title="引入资源和模块语法"></a>引入资源和模块语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&#x27;stylesheet&#x27; href=&#x27;/stylesheets/style.css&#x27; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;b&gt;&lt;%= msg %&gt;&lt;/b&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;img src=&quot;/images/1.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;% arr.forEach((item)=&gt;&#123; %&gt;</span><br><span class="line">          &lt;li&gt; &lt;%= item %&gt;  &lt;/li&gt;</span><br><span class="line">        &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240719 2:52&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、开发环境搭建&quot;&gt;&lt;a href=&quot;#一、开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、开发环境搭建&quot;&gt;&lt;/a&gt;一、开发环境搭建&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>App</title>
    <link href="http://cychenhaibin.github.io/2024/07/15/App/"/>
    <id>http://cychenhaibin.github.io/2024/07/15/App/</id>
    <published>2024-07-15T12:32:47.000Z</published>
    <updated>2024-07-18T09:06:53.820Z</updated>
    
    <content type="html"><![CDATA[<p>本文件已定稿，最后修改时间 20240715 20:32</p><hr><h3 id="一、定位"><a href="#一、定位" class="headerlink" title="一、定位"></a>一、定位</h3><p>api链接：<a href="http://www.html5plus.org/doc/zh_cn/geolocation.html">http://www.html5plus.org/doc/zh_cn/geolocation.html</a></p><p>方法：</p><ul><li><p><code>getCurrentPosition</code>：获取当前设备位置信息  <strong>进程不杀死还是会显示原来的地址信息</strong></p></li><li><p><code>watchPosition</code>：监听设备位置变化信息  <strong>实时监控，进程不杀死也会改变地址</strong></p></li><li><p><code>clearWatch</code>：关闭监听设备位置信息</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        当前位置:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;maps&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">        mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            plus.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            mui.<span class="title function_">toast</span>(<span class="string">&#x27;获取失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>, <span class="comment">// 是否高精确度获取位置信息</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="二、通讯录"><a href="#二、通讯录" class="headerlink" title="二、通讯录"></a>二、通讯录</h3><p>api链接：<a href="http://www.html5plus.org/doc/zh_cn/contacts.html">http://www.html5plus.org/doc/zh_cn/contacts.html</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;muiList&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    plus.<span class="property">contacts</span>.<span class="title function_">getAddressBook</span>( plus.<span class="property">contacts</span>.<span class="property">ADDRESSBOOK_PHONE</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">data.<span class="title function_">find</span>( <span class="literal">null</span>, <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">each</span>(res,<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">muiList.<span class="property">innerHTML</span> += <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;li class=&quot;mui-table-view-cell&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;a class=&quot;mui-navigate-right&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="subst">$&#123;item.displayName&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="subst">$&#123;item.phoneNumbers[<span class="number">0</span>].value&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res))</span></span><br><span class="line"><span class="language-javascript">&#125; );</span></span><br><span class="line"><span class="language-javascript">&#125; );</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、摄像头"><a href="#三、摄像头" class="headerlink" title="三、摄像头"></a>三、摄像头</h3><p>api链接：<a href="https://www.html5plus.org/doc/zh_cn/camera.html">https://www.html5plus.org/doc/zh_cn/camera.html</a></p><ol><li><p>获取摄像头对象</p><p><code>plus.camera.getCamera( index );</code></p></li><li><p>进行拍照</p><p><code>对象.captureImage(successCB, errorCB, options);</code></p></li><li><p>路径转换问题</p><p>api链接：<a href="https://www.html5plus.org/doc/zh_cn/io.html">https://www.html5plus.org/doc/zh_cn/io.html</a></p><p>本地转换成平台的URL：<code>plus.io.convertLocalFileSystemURL( url );</code></p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;oImg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;oImg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;#btn&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> cmr = plus.<span class="property">camera</span>.<span class="title function_">getCamera</span>( <span class="number">1</span> );</span></span><br><span class="line"><span class="language-javascript">cmr.<span class="title function_">captureImage</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">oImg.<span class="property">src</span> = plus.<span class="property">io</span>.<span class="title function_">convertLocalFileSystemURL</span>( data );</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;拍照失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、相册"><a href="#四、相册" class="headerlink" title="四、相册"></a>四、相册</h3><p>api链接：<a href="https://www.html5plus.org/doc/zh_cn/gallery.html">https://www.html5plus.org/doc/zh_cn/gallery.html</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;imgList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;oImg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;oImg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imgList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;imgList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;#btn&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">plus.<span class="property">gallery</span>.<span class="title function_">pick</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// oImg.src = data;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arrFiles = data.<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">each</span>(arrFiles,<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">oImg.<span class="property">src</span> = item;</span></span><br><span class="line"><span class="language-javascript">imgList.<span class="title function_">appendChild</span>(oImg);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;上传失败&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">multiple</span>: <span class="literal">true</span> <span class="comment">// 可以上传多张</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、分享"><a href="#五、分享" class="headerlink" title="五、分享"></a>五、分享</h3><p>api链接：<a href="https://www.html5plus.org/doc/zh_cn/share.html">https://www.html5plus.org/doc/zh_cn/share.html</a></p><ol><li><p>获取分享服务</p><p><code>plus.share.getServices(successCB, errorCB);</code></p></li><li><p>发送分享</p><p><code>obj.send(msg, successCB, errorCB);</code></p><p>obj 就是分享服务的对象，并且是区分微信好友还是微信朋友圈的对象</p><p>“WXSceneSession”分享到微信的“我的好友”</p><p>“WXSceneTimeline”分享到微信的“朋友圈”</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;share&#x27;</span>&gt;</span> 分享 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//合并后服务对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> shares = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">plus.<span class="property">share</span>.<span class="title function_">getServices</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取到分享服务</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>( data )&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;data.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> t = data[i];</span></span><br><span class="line"><span class="language-javascript">shares[t.<span class="property">id</span>] = t;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;获取分享服务失败~~~~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;#share&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> ids = [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>:<span class="string">&#x27;weixin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">ex</span>:<span class="string">&#x27;WXSceneSession&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>:<span class="string">&#x27;weixin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">ex</span>:<span class="string">&#x27;WXSceneTimeline&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>:<span class="string">&#x27;qq&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>:<span class="string">&#x27;sinaweibo&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> aBtns = [</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">title</span>:<span class="string">&#x27;分享到微信好友&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">title</span>:<span class="string">&#x27;分享到微信朋友圈&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">title</span>:<span class="string">&#x27;分享到QQ&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">title</span>:<span class="string">&#x27;分享到新浪微博&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">];</span></span><br><span class="line"><span class="language-javascript">plus.<span class="property">nativeUI</span>.<span class="title function_">actionSheet</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">cancel</span>:<span class="string">&#x27;取消分享&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">buttons</span>:aBtns</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> i = e.<span class="property">index</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//点击了某某分享</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>( i &gt; <span class="number">0</span> )&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s_id = ids[ i - <span class="number">1</span> ].<span class="property">id</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> share = shares[s_id];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">title</span>:<span class="string">&#x27;这是一个分享的标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">content</span>:<span class="string">&#x27;这是分享的内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">thumbs</span>:[<span class="string">&#x27;icons1.png&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">href</span>:<span class="string">&#x27;http://m.xuexiluxian.cn/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">extra</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">scene</span>:ids[ i - <span class="number">1</span> ].<span class="property">ex</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">share.<span class="title function_">send</span>(msg, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;分享成功!!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;分享失败~~&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、支付"><a href="#六、支付" class="headerlink" title="六、支付"></a>六、支付</h3><ol><li><h5 id="支付所需要的东西"><a href="#支付所需要的东西" class="headerlink" title="支付所需要的东西"></a>支付所需要的东西</h5><ol><li>支付方式【微信】【支付宝】</li><li>支付的金额</li><li>订单的标题</li><li>订单号 </li><li>订单的有效期</li><li>支付完成跳转的链接</li></ol></li><li><h5 id="支付的完整流程"><a href="#支付的完整流程" class="headerlink" title="支付的完整流程"></a>支付的完整流程</h5><ol><li><p>立即购买</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&#x27;xxxxx&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;     ====&gt;前端给后端传递的数据</span><br><span class="line">用户</span><br><span class="line">订单的金额</span><br><span class="line">订单的商品系列</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123; ===》后端给前端返回的数据</span><br><span class="line"><span class="keyword">if</span>( data.<span class="property">xxx</span> )&#123;</span><br><span class="line">data是一个对象，订单号</span><br><span class="line">跳转到确认订单页面</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>确认订单——-点击提交订单——-选择支付方式（支付之前）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">data</span>:&#123;   -----前端给后端传递数据</span><br><span class="line"><span class="attr">appid</span>:<span class="string">&#x27;已经之前准备好的&#x27;</span></span><br><span class="line">订单号</span><br><span class="line">选择了哪种支付方式</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 后端会返回一个<span class="literal">true</span>，代表可以支付了</span><br><span class="line"><span class="number">2.</span> 还会返回一个标示（哪种支付方式）</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 后端给前端传递的哪种支付方式 === 用户点击的哪种支付方式  )&#123;</span><br><span class="line"></span><br><span class="line">请求支付操作（发起支付） 【详细见下面】</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对接官方支付</p><p>把一些得到的数据，传递给支付宝|微信支付官方</p></li></ol></li></ol><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;goPayment&#x27;</span>&gt;</span> 去支付 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;#goPayment&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">openWindow</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>:<span class="string">&#x27;payment.html&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>:<span class="string">&#x27;payment&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>payment.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mui-bar mui-bar-nav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-action-back mui-icon mui-icon-left-nav mui-pull-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mui-title&quot;</span>&gt;</span>选择支付方式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>支付金额<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;price&#x27;</span>&gt;</span>元</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;payList&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;微信支付&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;pay&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;wxpay&#x27;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;支付宝支付&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;pay&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;alipay&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view-cell&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-navigate-right&quot;</span>&gt;</span></span><br><span class="line">支付方式：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;channel&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view-cell&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-navigate-right&quot;</span>&gt;</span></span><br><span class="line">支付金额：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;total_fee&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view-cell&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-navigate-right&quot;</span>&gt;</span></span><br><span class="line">订单号：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;bill_no&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view-cell&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-navigate-right&quot;</span>&gt;</span></span><br><span class="line">支付状态：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;status&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./js/payment.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> price = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;price&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> total_fee = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;total_fee&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> channel = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;channel&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> bill_no = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bill_no&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> status = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;status&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;#payList&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;.pay&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> channel_id = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">case</span> <span class="string">&#x27;alipay&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">channel_id = <span class="string">&#x27;ALI_APP&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">case</span> <span class="string">&#x27;wxpay&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">channel_id = <span class="string">&#x27;WX_APP&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//构建给后端数据的数据结构</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fBeecloundPay</span>( channel_id );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//支付金额</span></span></span><br><span class="line"><span class="language-javascript">total_fee.<span class="property">innerHTML</span> = price.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//支付方式</span></span></span><br><span class="line"><span class="language-javascript">channel.<span class="property">innerHTML</span> = channel_id;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//订单号</span></span></span><br><span class="line"><span class="language-javascript">bill_no.<span class="property">innerHTML</span> = payment.<span class="title function_">orderNumber</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fBeecloundPay</span>(<span class="params">channelId</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">构建支付参数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">app_id    : APPID</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">channel   : 支付方式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">title     : 某个商品的标题</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">total_fee : 支付金额</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">bill_no   : 订单号</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">bill_timeout : 过期时间</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> payData = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">app_id</span>:<span class="string">&#x27;44f01a13-965f-4b27-ba9f-da678b47f3f5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">channel : channelId,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">title</span>:<span class="string">&#x27;买了个鸡&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">total_fee</span>:price.<span class="property">value</span> * <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">bill_no</span>:payment.<span class="title function_">orderNumber</span>(),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">bill_timeout</span>:<span class="number">300</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//支付过程</span></span></span><br><span class="line"><span class="language-javascript">payment.<span class="title function_">payReq</span>(payData,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//支付成功：状态</span></span></span><br><span class="line"><span class="language-javascript">status.<span class="property">innerHTML</span> = <span class="string">&#x27;支付成功&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//支付失败：状态</span></span></span><br><span class="line"><span class="language-javascript">status.<span class="property">innerHTML</span> = <span class="string">&#x27;支付失败&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payment.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> payment = &#123;&#125;;</span><br><span class="line"><span class="comment">//所有支付通道信息[支付宝和微信]</span></span><br><span class="line"><span class="keyword">let</span> channels = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//获取支付通道</span></span><br><span class="line">plus.<span class="property">payment</span>.<span class="title function_">getChannels</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">channels = data;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">mui.<span class="title function_">toast</span>(<span class="string">&#x27;获取支付通道失败~~&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成订单号 ：函数</span></span><br><span class="line">payment.<span class="property">orderNumber</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> random =  <span class="title class_">Math</span>.<span class="title function_">floor</span>( <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10000000000</span> + <span class="number">10000000000</span> );</span><br><span class="line"><span class="keyword">return</span> random + <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付过程的回调</span></span><br><span class="line">payment.<span class="property">payReq</span> = <span class="keyword">function</span>(<span class="params">payData,successCb,errorCb</span>)&#123;</span><br><span class="line"><span class="title function_">doPay</span>(payData,successCb,errorCb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送===》支付请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doPay</span>(<span class="params">payData,successCb,errorCb</span>)&#123;</span><br><span class="line">mui.<span class="title function_">ajax</span>(<span class="string">&#x27;https://apisz.beecloud.cn/2/rest/app/bill&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">data</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(payData),</span><br><span class="line"><span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line"><span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="attr">contentType</span>:<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;<span class="comment">//后端给我们返回的数据</span></span><br><span class="line"><span class="keyword">let</span> paySrc = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//请求接口没问题，可以发送支付操作了</span></span><br><span class="line"><span class="keyword">if</span>( data.<span class="property">result_code</span> == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">const</span> payChannel = <span class="title function_">fGetPayChannel</span>(payData.<span class="property">channel</span>);</span><br><span class="line"><span class="comment">//如果拿到了当前的支付通道，那么就可以发起支付请求了</span></span><br><span class="line"><span class="keyword">if</span>(payChannel)&#123;</span><br><span class="line"><span class="keyword">if</span>( payChannel.<span class="property">id</span> === <span class="string">&#x27;alipay&#x27;</span> )&#123;</span><br><span class="line"><span class="comment">//支付宝支付</span></span><br><span class="line">paySrc = data.<span class="property">order_string</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//其他支付</span></span><br><span class="line"><span class="keyword">const</span> staement = &#123;</span><br><span class="line">appid : data.<span class="property">app_id</span>,</span><br><span class="line">noncestr : data.<span class="property">nonce_str</span>,</span><br><span class="line">package : data.<span class="property">package</span>,</span><br><span class="line">partnerid : data.<span class="property">partner_id</span>,</span><br><span class="line">prepayid : data.<span class="property">prepay_id</span>,</span><br><span class="line">timestamp : data.<span class="property">timestamp</span>,</span><br><span class="line"><span class="attr">sign</span>:data.<span class="property">pay_sign</span></span><br><span class="line">&#125;;</span><br><span class="line">paySrc = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(staement);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求支付操作</span></span><br><span class="line">plus.<span class="property">payment</span>.<span class="title function_">request</span>(payChannel, paySrc, successCb,errorCb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到用户点击的哪种支付方式的通道</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fGetPayChannel</span>(<span class="params">cb_channel</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cb_channel_id = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span>(cb_channel)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;ALI_APP&#x27;</span>:</span><br><span class="line">cb_channel_id = <span class="string">&#x27;alipay&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;WX_APP&#x27;</span>:</span><br><span class="line">cb_channel_id = <span class="string">&#x27;wxpay&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> channels)&#123;</span><br><span class="line"><span class="comment">//和用户点击支付方式 与 获取的所有支付通道，进行对比，如果相当就可以返回</span></span><br><span class="line"><span class="keyword">if</span>(  channels[i].<span class="property">id</span> == cb_channel_id)&#123;</span><br><span class="line"><span class="comment">//当前匹配用户点击的支付方式的通道</span></span><br><span class="line"><span class="keyword">return</span>  channels[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、第三方登录"><a href="#七、第三方登录" class="headerlink" title="七、第三方登录"></a>七、第三方登录</h3><ol><li><p>触摸某一个登录方式（加入事件）</p></li><li><p>唤醒第三方登录（ html5plus的api ）</p></li><li><p>登录的第三方账号的信息（用户信息）</p><p> token<br> 名称<br> 头像<br> …</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;oauth&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;weixin&#x27;</span>&gt;</span> 微信登录 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;oauth&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;qq&#x27;</span>&gt;</span> QQ登录 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;oauth&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;sinaweibo&#x27;</span>&gt;</span> 微博登录 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&#x27;userName&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;userImg&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;out&#x27;</span>&gt;</span> 退出登录 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;js/oauth.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">plusReady</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//登录操作</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;.oauth&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取id</span></span></span><br><span class="line"><span class="language-javascript">id = <span class="variable language_">this</span>.<span class="property">id</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获得到对应的对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> obj = oauth.<span class="title function_">fFilterOauth</span>(id);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//请求登录操作</span></span></span><br><span class="line"><span class="language-javascript">obj.<span class="title function_">login</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用户信息</span></span></span><br><span class="line"><span class="language-javascript">obj.<span class="title function_">getUserInfo</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> userInfo = data.<span class="property">target</span>.<span class="property">userInfo</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userName&#x27;</span>).<span class="property">innerHTML</span> = userInfo.<span class="property">nickname</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userImg&#x27;</span>).<span class="property">src</span> = userInfo.<span class="property">headimgurl</span> || userInfo.<span class="property">profile_image_url</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;获取用户信息失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//消息提醒</span></span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//退出登录</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mui</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;tap&#x27;</span>,<span class="string">&#x27;#out&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> obj = oauth.<span class="title function_">fFilterOauth</span>(id);</span></span><br><span class="line"><span class="language-javascript">obj.<span class="title function_">logout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userName&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;xxxxx&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;退出成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mui.<span class="title function_">toast</span>(<span class="string">&#x27;退出登录失败,重新再试&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oauth = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> oauthList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">plus.<span class="property">oauth</span>.<span class="title function_">getServices</span>( <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">oauthList = data;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">mui.<span class="title function_">toast</span>(<span class="string">&#x27;获取列表失败&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取的列表和当前点击的做对比</span></span><br><span class="line">oauth.<span class="property">fFilterOauth</span> = <span class="keyword">function</span>(<span class="params"> id </span>)&#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">in</span> oauthList)&#123;</span><br><span class="line"><span class="keyword">if</span>( oauthList[i].<span class="property">id</span> == id )&#123;</span><br><span class="line"><span class="keyword">return</span> oauthList[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文件已定稿，最后修改时间 20240715 20:32&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;一、定位&quot;&gt;&lt;a href=&quot;#一、定位&quot; class=&quot;headerlink&quot; title=&quot;一、定位&quot;&gt;&lt;/a&gt;一、定位&lt;/h3&gt;&lt;p&gt;api链接：&lt;a href=&quot;http:/</summary>
      
    
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="http://cychenhaibin.github.io/tags/Front-end/"/>
    
  </entry>
  
</feed>
